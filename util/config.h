#ifndef UTILITY_CONFIG_H
#define UTILITY_CONFIG_H

#include "rt/def.h"

enum class PassTimeUnit {
    Seconds, Milliseconds, Microseconds, Nanoseconds, Ticks
};

#define FOR_EACH_CATEGORY(macro) \
    macro(General) \
    macro(Assembler) \
    macro(Jasmine) \
    macro(Clover) \
    macro(Test)

#ifndef RELEASE
#define IS_RELEASE 0
#define IS_DEBUG 1
#else
#define IS_RELEASE 1
#define IS_DEBUG 0
#endif

#define FOR_EACH_OPTION(macro) \
    /* General options. */ \
    macro(help, help, bool, false, General, "Show this help message.") \
    macro(listOptions, list-options, bool, false, General, "List all available options.") \
    \
    /* Assembler options. */ \
    macro(printMachineCode, print-machine-code, bool, false, Assembler, "Write all loaded machine code as hex to standard output.") \
    \
    /* Jasmine options. */ \
    macro(printJasmineBeforeOpts, print-jasmine-before-opts, bool, false, Jasmine, "Write jasmine IR to standard output before it gets optimized.") \
    macro(printJasmineAfterOpts, print-jasmine-after-opts, bool, false, Jasmine, "Write jasmine IR to standard output after the last optimization.") \
    macro(printJasmineAssembly, print-jasmine-assembly, bool, false, Jasmine, "Write the assembly generated by compiling jasmine IR to standard output.") \
    macro(printJasmineBeforeEachPass, print-jasmine-before-each-pass, bool, false, Jasmine, "Write jasmine IR to standard output before every optimization pass.") \
    macro(printJasmineCompileStats, print-jasmine-compile-stats, bool, false, Jasmine, "Print various stats about jasmine compilation.") \
    macro(printJasminePassTimes, print-jasmine-pass-times, bool, false, Jasmine, "Print how long each compilation pass took at the end of compilation.") \
    macro(printJasmineDOTBeforeOpts, print-jasmine-dot-before-opts, bool, false, Jasmine, "Write jasmine IR graph as GraphViz output before it gets optimized.") \
    macro(printJasmineDOTAfterOpts, print-jasmine-dot-after-opts, bool, false, Jasmine, "Write jasmine IR graph as GraphViz output after the last optimization.") \
    macro(printJasmineDOTBeforeEachPass, print-jasmine-dot-before-each-pass, bool, false, Jasmine, "Write jasmine IR graph as GraphViz output before every optimization pass.") \
    macro(jasmineDOTFile, jasmine-dot-file, const_slice<i8>, cstring(""), Jasmine, "Path to write jasmine GraphViz output to.") \
    macro(jasminePassTimingUnit, jasmine-pass-timing-unit, PassTimeUnit, PassTimeUnit::Milliseconds, Jasmine, "Time unit to use when reporting compilation time (valid units are s, ms, us, ns, and ticks).") \
    macro(maxInlinableSize, max-inlinable-size, i32, 100, Jasmine, "Maximum nodes that a function can have and still be able to be inlined.") \
    macro(maxInliningDepth, max-inlining-depth, i32, 2, Jasmine, "Maximum recursion depth that jasmine can use when inlining calls.") \
    macro(neverSkipCleanup, never-skip-cleanup, bool, false, Jasmine, "Disable the fast path of the jasmine cleanup pass.") \
    macro(neverSkipEnforceSSA, never-skip-enforce-ssa, bool, false, Jasmine, "Disable the fast path of the jasmine SSA enforcement pass.") \
    macro(verboseDominators, verbose-dominators, bool, false, Jasmine, "Enables verbose logging for dominator analysis.") \
    macro(verboseNaturalLoops, verbose-natural-loops, bool, false, Jasmine, "Enables verbose logging for natural loop analysis.") \
    macro(verboseEffects, verbose-effects, bool, false, Jasmine, "Enables verbose logging for effects analysis.") \
    macro(verboseSSA, verbose-ssa, bool, false, Jasmine, "Enables verbose logging for SSA conversion.") \
    macro(verboseInlining, verbose-inlining, bool, false, Jasmine, "Enables verbose logging for inlining.") \
    macro(verboseLiveness, verbose-liveness, bool, false, Jasmine, "Enables verbose logging for liveness analysis.") \
    macro(verboseStrengthReduction, verbose-strength-reduction, bool, false, Jasmine, "Enables verbose logging during strength reduction.") \
    macro(verboseInterference, verbose-interference, bool, false, Jasmine, "Enables verbose logging for interference graph analysis.") \
    macro(verboseContainment, verbose-containment, bool, false, Jasmine, "Enables verbose logging for containment graph analysis.") \
    macro(verboseRegalloc, verbose-regalloc, bool, false, Jasmine, "Enables verbose logging of register allocator assignments.") \
    macro(forceOptLevel, force-opt-level, i32, -1, Jasmine, "Universally override the optimization level of Jasmine compilation.") \
    \
    /* Basil options. */ \
    macro(printBasilSource, print-basil-source, bool, false, Basil, "Write Basil source to standard output after loading.") \
    macro(printBasilTokens, print-basil-tokens, bool, false, Basil, "Write list of Basil tokens to standard output after lexing source.") \
    macro(printBasilAST, print-basil-ast, bool, false, Basil, "Write parsed Basil AST to standard output after parsing.") \
    macro(printBasilBytecodeAST, print-basil-bytecode-ast, bool, false, Basil, "Write the Basil bytecode compilation AST to standard output.") \
    macro(printBasilBytecode, print-basil-bytecode, bool, false, Basil, "Write generated Basil bytecode to standard output when it is compiled.") \
    macro(verboseBasilCodegen, verbose-basil-codegen, bool, false, Basil, "Enables verbose logging for Basil bytecode compilation.") \
    macro(traceBytecodeExecution, trace-bytecode-execution, bool, false, Basil, "Logs a trace of all bytecodes executed by the Basil interpreter.") \
    macro(verboseGC, verbose-gc, bool, false, Basil, "Logs information whenever a GC occurs.") \
    \
    /* Clover options. */ \
    macro(loadOnly, load-only, bool, false, Clover, "Only load Clover sources and build artifacts, do not perform compilation work.") \
    macro(lexOnly, lex-only, bool, false, Clover, "Stop Clover compilation at the lexing phase.") \
    macro(parseOnly, parse-only, bool, false, Clover, "Stop Clover compilation at the parsing phase.") \
    macro(typecheckOnly, typecheck-only, bool, false, Clover, "Stop Clover compilation at the typechecking phase.") \
    macro(finalizeAfterTypechecking, finalize-after-typechecking, bool, true, Clover, "Finalize Clover modules after typechecking, without doing any further safety analysis.") \
    macro(compileToJasmine, compile-to-jasmine, bool, false, Clover, "Compile Clover to Jasmine IR and then stop.") \
    macro(jasmineASTComments, jasmine-ast-comments, bool, false, Clover, "Generate Jasmine IR comments for non-leaf AST nodes when compiling.") \
    macro(printSource, print-source, bool, false, Clover, "Print Clover source after loading.") \
    macro(printTokens, print-tokens, bool, false, Clover, "Print Clover tokens after lexing.") \
    macro(printParseTree, print-parse-tree, bool, false, Clover, "Print Clover AST immediately after parsing.") \
    macro(printExpandedTree, print-expanded-tree, bool, false, Clover, "Print Clover AST after post-parsing expansion.") \
    macro(printScopeTree, print-scope-tree, bool, false, Clover, "Print Clover scope tree after it gets computed.") \
    macro(printResolvedTree, print-resolved-tree, bool, false, Clover, "Print Clover AST after name and type resolution.") \
    macro(printInferredTree, print-inferred-tree, bool, false, Clover, "Print Clover AST after type inference.") \
    macro(printInferredTreeAfterEachPass, print-inferred-tree-after-each-pass, bool, false, Clover, "Print Clover AST after each type inference iteration.") \
    macro(printTypeConstraints, print-type-constraints, bool, false, Clover, "Print inferred type constraint graph to standard output.") \
    macro(printTypeConstraintsAsDOT, print-type-constraints-as-dot, bool, false, Clover, "Print inferred type constraint graph as GraphViz graph.") \
    macro(cloverDOTFile, clover-dot-file, const_slice<i8>, cstring(""), Clover, "Path to write Clover GraphViz output to.") \
    macro(printProducts, print-products, bool, false, Clover, "Print Clover build products at the end of compilation.") \
    macro(parseAsSexp, parse-as-sexp, bool, false, Clover, "Parse token stream as s-expressions.") \
    macro(readableTypeVars, readable-type-vars, bool, IS_DEBUG, Clover, "Give type variables human-readable names instead of just indices.") \
    macro(validateResolution, validate-resolution, bool, true, Clover, "Do extra validation after name and type resolution.") \
    macro(verboseUnify, verbose-unify, i32, 0, Clover, "Enables verbose logging for type unification during Clover type inference and checking passes.") \
    macro(reportErrorsImmediately, report-errors-immediately, bool, false, Clover, "Report the first error immediately after it happens and exit.") \
    macro(verboseAnalyze, verbose-analyze, i32, 0, Clover, "Enables verbose logging for the Clover memory safety analysis phase.") \
    \
    /* Test options. */ \
    macro(printTestNames, print-test-names, bool, false, Test, "Print the name of each test before it runs.") \
    macro(crashOnTestFailure, crash-on-test-failure, bool, false, Test, "Crash when a test assertion fails.")

#define DEFINE_OPTION(name, optname, type, ...) extern type name;
namespace config {
    FOR_EACH_OPTION(DEFINE_OPTION)
};
#undef DEFINE_OPTION

void parseOptions(i32& argc, i8** argv);

#endif
