#include "util/utf.h"

static UnicodeError ERROR = NO_ERROR;

UnicodeError unicode_error() {
    return ERROR;
}

const char* utf8_forward(const char* str) {
	unsigned char ch = *str;
	if (ch < UTF8_TWO) return str + 1;
	else if (ch < UTF8_THREE) return str + 2;
	else if (ch < UTF8_FOUR) return str + 3;
	else return str + 4;
}

const char* utf8_backward(const char* str) {
	str --;
	while ((*str & 0b11000000) == 0b10000000) str --;
	return str;
}

rune utf8_rune_at(const char* str) {
	if ((unsigned char)str[0] < UTF8_INNER) {
		return str[0];
	}
	else if ((unsigned char)str[0] < UTF8_THREE) {
		return (u32)(str[0] & UTF8_TWO_MASK) << 6 
					| (u32)(str[1] & UTF8_INNER_MASK);
	}
	else if ((unsigned char)str[0] < UTF8_FOUR) {
		return (u32)(str[0] & UTF8_THREE_MASK) << 12 
					| (u32)(str[1] & UTF8_INNER_MASK) << 6 
					| (u32)(str[2] & UTF8_INNER_MASK);
	}
	else {
		return (u32)(str[0] & UTF8_FOUR_MASK) << 18 
					| (u32)(str[1] & UTF8_INNER_MASK) << 12 
					| (u32)(str[2] & UTF8_INNER_MASK) << 6 
					| (u32)(str[3] & UTF8_INNER_MASK);
	}
}

const char* utf8_decode_forward(const char* str, rune* out) {
	*out = utf8_rune_at(str);
	return utf8_forward(str);
}

const char* utf8_decode_backward(const char* str, rune* out) {
	str = utf8_backward(str);
	*out = utf8_rune_at(str);
	return str;
}

unsigned long int utf8_length(const char* str, unsigned long int str_length) {
    unsigned long int i = 0, n = 0;
    while (i < str_length) {
        if ((unsigned char)str[i] < UTF8_TWO) ++ n, ++ i;
        else if ((unsigned char)str[i] < UTF8_THREE) ++ n, i += 2;
        else if ((unsigned char)str[i] < UTF8_FOUR) ++ n, i += 3;
        else ++ n, i += 4;
    }
    if (i != str_length) ERROR = INCORRECT_FORMAT;
    return n;
}

unsigned long int utf8_bytes(const rune* str, unsigned long int str_length) {
    unsigned long int i = 0, n = 0;
    while (n < str_length) {
        if (str[n].get() <= UTF8_ONE_MAX) ++ n, ++ i;
        else if (str[n].get() <= UTF8_TWO_MAX) ++ n, i += 2;
        else if (str[n].get() <= UTF8_THREE_MAX) ++ n, i += 3;
        else ++ n, i += 4;
    }
    if (n != str_length) ERROR = INCORRECT_FORMAT;
    return i;
}

amounts utf8_decode(const char* str, unsigned long int str_length, 
                              rune* out, unsigned long int out_length) {
    unsigned long int i = 0, n = 0;
    while (i < str_length && n < out_length) {
        if ((unsigned char)str[i] < UTF8_INNER) {
            out[n] = str[i];
            ++ n, ++ i;
        }
        else if ((unsigned char)str[i] < UTF8_THREE) {
            if (i > str_length - 1) {
                ERROR = RAN_OUT_OF_BOUNDS;
                return {n, i};
            }
            else out[n] = (u32)(str[i] & UTF8_TWO_MASK) << 6 
                        | (u32)(str[i + 1] & UTF8_INNER_MASK);
            ++ n, i += 2;
        }
        else if ((unsigned char)str[i] < UTF8_FOUR) {
            if (i > str_length - 2) {
                ERROR = RAN_OUT_OF_BOUNDS;
                return {n, i};
            }
            else out[n] = (u32)(str[i] & UTF8_THREE_MASK) << 12 
                        | (u32)(str[i + 1] & UTF8_INNER_MASK) << 6 
                        | (u32)(str[i + 2] & UTF8_INNER_MASK);
            ++ n, i += 3;
        }
        else {
            if (i > str_length - 3) {
                ERROR = RAN_OUT_OF_BOUNDS;
                return {n, i};
            }
            else out[n] = (u32)(str[i] & UTF8_FOUR_MASK) << 18 
                        | (u32)(str[i + 1] & UTF8_INNER_MASK) << 12 
                        | (u32)(str[i + 2] & UTF8_INNER_MASK) << 6 
                        | (u32)(str[i + 3] & UTF8_INNER_MASK);
            ++ n, i += 4;
        }
    }
    return {n, i};
}

unsigned long int utf8_encode(const rune* str, unsigned long int str_length,
                              char* out, unsigned long int out_length) {
    unsigned long int i = 0, n = 0;
    while (i < str_length && n < out_length) {
        if (str[i].get() <= UTF8_ONE_MAX) {
            out[n] = str[i].get();
            ++ n, ++ i;
        }
        else if (str[i].get() <= UTF8_TWO_MAX) {
            if (n > out_length - 1) {
                ERROR = BUFFER_TOO_SMALL;
                return n;
            }
            else {
                out[n] = (str[i].get() >> 6 & UTF8_TWO_MASK) | UTF8_TWO;
                out[n + 1] = (str[i].get() & UTF8_INNER_MASK) | UTF8_INNER;
            }
            n += 2, ++ i;
        }
        else if (str[i].get() <= UTF8_THREE_MAX) {
            if (n > out_length - 2) {
                ERROR = BUFFER_TOO_SMALL;
                return n;
            }
            else {
                out[n] = (str[i].get() >> 12 & UTF8_THREE_MASK) | UTF8_THREE;
                out[n + 1] = (str[i].get() >> 6 & UTF8_INNER_MASK) | UTF8_INNER;
                out[n + 2] = (str[i].get() & UTF8_INNER_MASK) | UTF8_INNER;
            }
            n += 3, ++ i;
        }
        else if (str[i].get() <= UTF8_FOUR_MAX) {
            if (n > out_length - 3) {
                ERROR = BUFFER_TOO_SMALL;
                return n;
            }
            else {
                out[n] = (str[i].get() >> 18 & UTF8_FOUR_MASK) | UTF8_FOUR;
                out[n + 1] = (str[i].get() >> 12 & UTF8_INNER_MASK) | UTF8_INNER;
                out[n + 2] = (str[i].get() >> 6 & UTF8_INNER_MASK) | UTF8_INNER;
                out[n + 3] = (str[i].get() & UTF8_INNER_MASK) | UTF8_INNER;
            }
            n += 4, ++ i;
        }
        else {
            ERROR = INVALID_RUNE;
            return n;
        }
    }
    if (i != str_length) ERROR = INCORRECT_FORMAT;
    return n;
}

unsigned long int utf16_length(const char* str, unsigned long int str_length) {
    return 0; // todo
}

unsigned long int utf16_decode(const char* str, unsigned long int str_length, 
                               rune* out, unsigned long int out_length) {
    return 0; // todo
}

unsigned long int utf16_encode(const rune* str, unsigned long int str_length,
                               char* out, unsigned long int out_length) {
    return 0; // todo
}

#ifndef UTF8_MINIMAL

typedef struct {
    uint32_t start;
    uint32_t end;
} utf_range;

static const uint32_t EVEN_BIT = 0xf0000000;
static const uint32_t ODD_BIT = 0x70000000;
static const uint32_t COMPARE_MASK = 0x1FFFFF;

static constexpr const utf_range control_chars[] = { //  Cc
	{ 0x0, 0x1f }, // Basic Latin
	{ 0x7f, 0x9f }
};

static constexpr const utf_range format_chars[] = { //  Cf
	{ 0xad, 0xad },
	{ 0x600, 0x605 }, // Arabic
	{ 0x61c, 0x61c },
	{ 0x6dd, 0x6dd },
	{ 0x70f, 0x70f },
	{ 0x8e2, 0x8e2 },
	{ 0x180e, 0x180e },
	{ 0x200b, 0x200f },
	{ 0x202a, 0x202e },
	{ 0x2060, 0x2064 },
	{ 0x2066, 0x206f },
	{ 0xfeff, 0xfeff },
	{ 0xfff9, 0xfffb },
	{ 0x110bd, 0x110bd },
	{ 0x110cd, 0x110cd },
	{ 0x13430, 0x13438 }, // Egyptian Hieroglyph Format Controls
	{ 0x1bca0, 0x1bca3 }, // Shorthand Format Controls
	{ 0x1d173, 0x1d17a },
	{ 0xe0001, 0xe0001 },
	{ 0xe0020, 0xe007f }
};

// static const utf_range not_assigned_chars[] = {}; // Cn

static constexpr const utf_range private_use_chars[] = { //  Co
	{ 0xe000, 0xe000 },
	{ 0xf8ff, 0xf8ff },
	{ 0xf0000, 0xf0000 },
	{ 0xffffd, 0xffffd },
	{ 0x100000, 0x100000 }, // Supplementary Private Use Area-B
	{ 0x10fffd, 0x10fffd }
};

static constexpr const utf_range surrogate_chars[] = { //  Cs
	{ 0xd800, 0xd800 },
	{ 0xdb7f, 0xdb80 },
	{ 0xdbff, 0xdc00 },
	{ 0xdfff, 0xdfff }
};

// static const utf_range cased_letters[] = {}; //  LC

static constexpr const utf_range lowercase_letters[] = { //  Ll
	{ 0x61, 0x7a },
	{ 0xb5, 0xb5 },
	{ 0xdf, 0xf6 },
	{ 0xf8, 0xff },
	{ 0x101 | ODD_BIT, 0x135 | ODD_BIT },
	{ 0x137, 0x138 },
	{ 0x13a | EVEN_BIT, 0x146 | EVEN_BIT },
	{ 0x148, 0x149 },
	{ 0x14b | ODD_BIT, 0x177 | ODD_BIT },
	{ 0x17a | EVEN_BIT, 0x17c | EVEN_BIT },
	{ 0x17e, 0x180 },
	{ 0x183 | ODD_BIT, 0x185 | ODD_BIT },
	{ 0x188, 0x188 },
	{ 0x18c, 0x18d },
	{ 0x192, 0x192 },
	{ 0x195, 0x195 },
	{ 0x199, 0x19b },
	{ 0x19e, 0x19e },
	{ 0x1a1 | ODD_BIT, 0x1a5 | ODD_BIT },
	{ 0x1a8, 0x1a8 },
	{ 0x1aa, 0x1ab },
	{ 0x1ad, 0x1ad },
	{ 0x1b0, 0x1b0 },
	{ 0x1b4 | EVEN_BIT, 0x1b6 | EVEN_BIT },
	{ 0x1b9, 0x1ba },
	{ 0x1bd, 0x1bf },
	{ 0x1c6, 0x1c6 },
	{ 0x1c9, 0x1c9 },
	{ 0x1cc | EVEN_BIT, 0x1da | EVEN_BIT },
	{ 0x1dc, 0x1dd },
	{ 0x1df | ODD_BIT, 0x1ed | ODD_BIT },
	{ 0x1ef, 0x1f0 },
	{ 0x1f3 | ODD_BIT, 0x1f5 | ODD_BIT },
	{ 0x1f9 | ODD_BIT, 0x231 | ODD_BIT },
	{ 0x233, 0x239 },
	{ 0x23c, 0x23c },
	{ 0x23f, 0x240 },
	{ 0x242, 0x242 },
	{ 0x247 | ODD_BIT, 0x24d | ODD_BIT },
	{ 0x24f, 0x293 },
	{ 0x295, 0x2af },
	{ 0x371 | ODD_BIT, 0x373 | ODD_BIT },
	{ 0x377, 0x377 },
	{ 0x37b, 0x37d },
	{ 0x390, 0x390 },
	{ 0x3ac, 0x3ce },
	{ 0x3d0, 0x3d1 },
	{ 0x3d5, 0x3d7 },
	{ 0x3d9 | ODD_BIT, 0x3ed | ODD_BIT },
	{ 0x3ef, 0x3f3 },
	{ 0x3f5, 0x3f5 },
	{ 0x3f8, 0x3f8 },
	{ 0x3fb, 0x3fc },
	{ 0x430, 0x45f }, // Cyrillic
	{ 0x461 | ODD_BIT, 0x481 | ODD_BIT },
	{ 0x48b | ODD_BIT, 0x4bf | ODD_BIT },
	{ 0x4c2 | EVEN_BIT, 0x4cc | EVEN_BIT },
	{ 0x4ce, 0x4cf },
	{ 0x4d1 | ODD_BIT, 0x52f | ODD_BIT },
	{ 0x560, 0x588 },
	{ 0x10d0, 0x10fa },
	{ 0x10fd, 0x10ff },
	{ 0x13f8, 0x13fd },
	{ 0x1c80, 0x1c88 }, // Cyrillic Extended-C
	{ 0x1d00, 0x1d2b }, // Phonetic Extensions
	{ 0x1d6b, 0x1d77 },
	{ 0x1d79, 0x1d9a },
	{ 0x1e01 | ODD_BIT, 0x1e93 | ODD_BIT },
	{ 0x1e95, 0x1e9d },
	{ 0x1e9f | ODD_BIT, 0x1efd | ODD_BIT },
	{ 0x1eff, 0x1f07 },
	{ 0x1f10, 0x1f15 },
	{ 0x1f20, 0x1f27 },
	{ 0x1f30, 0x1f37 },
	{ 0x1f40, 0x1f45 },
	{ 0x1f50, 0x1f57 },
	{ 0x1f60, 0x1f67 },
	{ 0x1f70, 0x1f7d },
	{ 0x1f80, 0x1f87 },
	{ 0x1f90, 0x1f97 },
	{ 0x1fa0, 0x1fa7 },
	{ 0x1fb0, 0x1fb4 },
	{ 0x1fb6, 0x1fb7 },
	{ 0x1fbe, 0x1fbe },
	{ 0x1fc2, 0x1fc4 },
	{ 0x1fc6, 0x1fc7 },
	{ 0x1fd0, 0x1fd3 },
	{ 0x1fd6, 0x1fd7 },
	{ 0x1fe0, 0x1fe7 },
	{ 0x1ff2, 0x1ff4 },
	{ 0x1ff6, 0x1ff7 },
	{ 0x210a, 0x210a },
	{ 0x210e, 0x210f },
	{ 0x2113, 0x2113 },
	{ 0x212f, 0x212f },
	{ 0x2134, 0x2134 },
	{ 0x2139, 0x2139 },
	{ 0x213c, 0x213d },
	{ 0x2146, 0x2149 },
	{ 0x214e, 0x214e },
	{ 0x2184, 0x2184 },
	{ 0x2c30, 0x2c5e },
	{ 0x2c61, 0x2c61 },
	{ 0x2c65, 0x2c66 },
	{ 0x2c68 | EVEN_BIT, 0x2c6c | EVEN_BIT },
	{ 0x2c71, 0x2c71 },
	{ 0x2c73, 0x2c74 },
	{ 0x2c76, 0x2c7b },
	{ 0x2c81 | ODD_BIT, 0x2ce1 | ODD_BIT }, // Coptic
	{ 0x2ce3, 0x2ce4 },
	{ 0x2cec | EVEN_BIT, 0x2cee | EVEN_BIT },
	{ 0x2cf3, 0x2cf3 },
	{ 0x2d00, 0x2d25 }, // Georgian Supplement
	{ 0x2d27, 0x2d27 },
	{ 0x2d2d, 0x2d2d },
	{ 0xa641 | ODD_BIT, 0xa66d | ODD_BIT },
	{ 0xa681 | ODD_BIT, 0xa69b | ODD_BIT },
	{ 0xa723 | ODD_BIT, 0xa72d | ODD_BIT },
	{ 0xa72f, 0xa731 },
	{ 0xa733 | ODD_BIT, 0xa76f | ODD_BIT },
	{ 0xa771, 0xa778 },
	{ 0xa77a | EVEN_BIT, 0xa77c | EVEN_BIT },
	{ 0xa77f | ODD_BIT, 0xa787 | ODD_BIT },
	{ 0xa78c | EVEN_BIT, 0xa78e | EVEN_BIT },
	{ 0xa791, 0xa791 },
	{ 0xa793, 0xa795 },
	{ 0xa797 | ODD_BIT, 0xa7a9 | ODD_BIT },
	{ 0xa7af, 0xa7af },
	{ 0xa7b5 | ODD_BIT, 0xa7bf | ODD_BIT },
	{ 0xa7c3, 0xa7c3 },
	{ 0xa7c8 | EVEN_BIT, 0xa7ca | EVEN_BIT },
	{ 0xa7f6, 0xa7f6 },
	{ 0xa7fa, 0xa7fa },
	{ 0xab30, 0xab5a },
	{ 0xab60, 0xab68 },
	{ 0xab70, 0xabbf },
	{ 0xfb00, 0xfb06 },
	{ 0xfb13, 0xfb17 },
	{ 0xff41, 0xff5a },
	{ 0x10428, 0x1044f },
	{ 0x104d8, 0x104fb },
	{ 0x10cc0, 0x10cf2 },
	{ 0x118c0, 0x118df },
	{ 0x16e60, 0x16e7f },
	{ 0x1d41a, 0x1d433 },
	{ 0x1d44e, 0x1d454 },
	{ 0x1d456, 0x1d467 },
	{ 0x1d482, 0x1d49b },
	{ 0x1d4b6, 0x1d4b9 },
	{ 0x1d4bb, 0x1d4bb },
	{ 0x1d4bd, 0x1d4c3 },
	{ 0x1d4c5, 0x1d4cf },
	{ 0x1d4ea, 0x1d503 },
	{ 0x1d51e, 0x1d537 },
	{ 0x1d552, 0x1d56b },
	{ 0x1d586, 0x1d59f },
	{ 0x1d5ba, 0x1d5d3 },
	{ 0x1d5ee, 0x1d607 },
	{ 0x1d622, 0x1d63b },
	{ 0x1d656, 0x1d66f },
	{ 0x1d68a, 0x1d6a5 },
	{ 0x1d6c2, 0x1d6da },
	{ 0x1d6dc, 0x1d6e1 },
	{ 0x1d6fc, 0x1d714 },
	{ 0x1d716, 0x1d71b },
	{ 0x1d736, 0x1d74e },
	{ 0x1d750, 0x1d755 },
	{ 0x1d770, 0x1d788 },
	{ 0x1d78a, 0x1d78f },
	{ 0x1d7aa, 0x1d7c2 },
	{ 0x1d7c4, 0x1d7c9 },
	{ 0x1d7cb, 0x1d7cb },
	{ 0x1e922, 0x1e943 }
};

static constexpr const utf_range letter_modifiers[] = { //  Lm
	{ 0x2b0, 0x2c1 }, // Spacing Modifier Letters
	{ 0x2c6, 0x2d1 },
	{ 0x2e0, 0x2e4 },
	{ 0x2ec | EVEN_BIT, 0x2ee | EVEN_BIT },
	{ 0x374, 0x374 },
	{ 0x37a, 0x37a },
	{ 0x559, 0x559 },
	{ 0x640, 0x640 },
	{ 0x6e5, 0x6e6 },
	{ 0x7f4, 0x7f5 },
	{ 0x7fa, 0x7fa },
	{ 0x81a, 0x81a },
	{ 0x824, 0x824 },
	{ 0x828, 0x828 },
	{ 0x971, 0x971 },
	{ 0xe46, 0xe46 },
	{ 0xec6, 0xec6 },
	{ 0x10fc, 0x10fc },
	{ 0x17d7, 0x17d7 },
	{ 0x1843, 0x1843 },
	{ 0x1aa7, 0x1aa7 },
	{ 0x1c78, 0x1c7d },
	{ 0x1d2c, 0x1d6a },
	{ 0x1d78, 0x1d78 },
	{ 0x1d9b, 0x1dbf }, // Phonetic Extensions Supplement
	{ 0x2071, 0x2071 },
	{ 0x207f, 0x207f },
	{ 0x2090, 0x209c },
	{ 0x2c7c, 0x2c7d },
	{ 0x2d6f, 0x2d6f },
	{ 0x2e2f, 0x2e2f },
	{ 0x3005, 0x3005 },
	{ 0x3031, 0x3035 },
	{ 0x303b, 0x303b },
	{ 0x309d, 0x309e },
	{ 0x30fc, 0x30fe },
	{ 0xa015, 0xa015 },
	{ 0xa4f8, 0xa4fd },
	{ 0xa60c, 0xa60c },
	{ 0xa67f, 0xa67f },
	{ 0xa69c, 0xa69d },
	{ 0xa717, 0xa71f },
	{ 0xa770, 0xa770 },
	{ 0xa788, 0xa788 },
	{ 0xa7f8, 0xa7f9 },
	{ 0xa9cf, 0xa9cf },
	{ 0xa9e6, 0xa9e6 },
	{ 0xaa70, 0xaa70 },
	{ 0xaadd, 0xaadd },
	{ 0xaaf3, 0xaaf4 },
	{ 0xab5c, 0xab5f },
	{ 0xab69, 0xab69 },
	{ 0xff70, 0xff70 },
	{ 0xff9e, 0xff9f },
	{ 0x16b40, 0x16b43 },
	{ 0x16f93, 0x16f9f },
	{ 0x16fe0, 0x16fe1 }, // Ideographic Symbols and Punctuation
	{ 0x16fe3, 0x16fe3 },
	{ 0x1e137, 0x1e13d },
	{ 0x1e94b, 0x1e94b }
};

static constexpr const utf_range other_letters[] = { //  Lo
	{ 0xaa, 0xaa },
	{ 0xba, 0xba },
	{ 0x1bb, 0x1bb },
	{ 0x1c0, 0x1c3 },
	{ 0x294, 0x294 }, // IPA Extensions
	{ 0x5d0, 0x5ea },
	{ 0x5ef, 0x5f2 },
	{ 0x620, 0x63f },
	{ 0x641, 0x64a },
	{ 0x66e, 0x66f },
	{ 0x671, 0x6d3 },
	{ 0x6d5, 0x6d5 },
	{ 0x6ee, 0x6ef },
	{ 0x6fa, 0x6fc },
	{ 0x6ff, 0x6ff },
	{ 0x710, 0x710 },
	{ 0x712, 0x72f },
	{ 0x74d, 0x7a5 },
	{ 0x7b1, 0x7b1 },
	{ 0x7ca, 0x7ea },
	{ 0x800, 0x815 }, // Samaritan
	{ 0x840, 0x858 }, // Mandaic
	{ 0x860, 0x86a }, // Syriac Supplement
	{ 0x8a0, 0x8b4 }, // Arabic Extended-A
	{ 0x8b6, 0x8c7 },
	{ 0x904, 0x939 },
	{ 0x93d, 0x93d },
	{ 0x950, 0x950 },
	{ 0x958, 0x961 },
	{ 0x972, 0x980 },
	{ 0x985, 0x98c },
	{ 0x98f, 0x990 },
	{ 0x993, 0x9a8 },
	{ 0x9aa, 0x9b0 },
	{ 0x9b2, 0x9b2 },
	{ 0x9b6, 0x9b9 },
	{ 0x9bd, 0x9bd },
	{ 0x9ce, 0x9ce },
	{ 0x9dc, 0x9dd },
	{ 0x9df, 0x9e1 },
	{ 0x9f0, 0x9f1 },
	{ 0x9fc, 0x9fc },
	{ 0xa05, 0xa0a },
	{ 0xa0f, 0xa10 },
	{ 0xa13, 0xa28 },
	{ 0xa2a, 0xa30 },
	{ 0xa32, 0xa33 },
	{ 0xa35, 0xa36 },
	{ 0xa38, 0xa39 },
	{ 0xa59, 0xa5c },
	{ 0xa5e, 0xa5e },
	{ 0xa72, 0xa74 },
	{ 0xa85, 0xa8d },
	{ 0xa8f, 0xa91 },
	{ 0xa93, 0xaa8 },
	{ 0xaaa, 0xab0 },
	{ 0xab2, 0xab3 },
	{ 0xab5, 0xab9 },
	{ 0xabd, 0xabd },
	{ 0xad0, 0xad0 },
	{ 0xae0, 0xae1 },
	{ 0xaf9, 0xaf9 },
	{ 0xb05, 0xb0c },
	{ 0xb0f, 0xb10 },
	{ 0xb13, 0xb28 },
	{ 0xb2a, 0xb30 },
	{ 0xb32, 0xb33 },
	{ 0xb35, 0xb39 },
	{ 0xb3d, 0xb3d },
	{ 0xb5c, 0xb5d },
	{ 0xb5f, 0xb61 },
	{ 0xb71, 0xb71 },
	{ 0xb83, 0xb83 },
	{ 0xb85, 0xb8a },
	{ 0xb8e, 0xb90 },
	{ 0xb92, 0xb95 },
	{ 0xb99, 0xb9a },
	{ 0xb9c, 0xb9c },
	{ 0xb9e, 0xb9f },
	{ 0xba3, 0xba4 },
	{ 0xba8, 0xbaa },
	{ 0xbae, 0xbb9 },
	{ 0xbd0, 0xbd0 },
	{ 0xc05, 0xc0c },
	{ 0xc0e, 0xc10 },
	{ 0xc12, 0xc28 },
	{ 0xc2a, 0xc39 },
	{ 0xc3d, 0xc3d },
	{ 0xc58, 0xc5a },
	{ 0xc60, 0xc61 },
	{ 0xc80, 0xc80 }, // Kannada
	{ 0xc85, 0xc8c },
	{ 0xc8e, 0xc90 },
	{ 0xc92, 0xca8 },
	{ 0xcaa, 0xcb3 },
	{ 0xcb5, 0xcb9 },
	{ 0xcbd, 0xcbd },
	{ 0xcde, 0xcde },
	{ 0xce0, 0xce1 },
	{ 0xcf1, 0xcf2 },
	{ 0xd04, 0xd0c },
	{ 0xd0e, 0xd10 },
	{ 0xd12, 0xd3a },
	{ 0xd3d, 0xd3d },
	{ 0xd4e, 0xd4e },
	{ 0xd54, 0xd56 },
	{ 0xd5f, 0xd61 },
	{ 0xd7a, 0xd7f },
	{ 0xd85, 0xd96 },
	{ 0xd9a, 0xdb1 },
	{ 0xdb3, 0xdbb },
	{ 0xdbd, 0xdbd },
	{ 0xdc0, 0xdc6 },
	{ 0xe01, 0xe30 }, // Thai
	{ 0xe32, 0xe33 },
	{ 0xe40, 0xe45 },
	{ 0xe81, 0xe82 }, // Lao
	{ 0xe84, 0xe84 },
	{ 0xe86, 0xe8a },
	{ 0xe8c, 0xea3 },
	{ 0xea5, 0xea5 },
	{ 0xea7, 0xeb0 },
	{ 0xeb2, 0xeb3 },
	{ 0xebd, 0xebd },
	{ 0xec0, 0xec4 },
	{ 0xedc, 0xedf },
	{ 0xf00, 0xf00 }, // Tibetan
	{ 0xf40, 0xf47 },
	{ 0xf49, 0xf6c },
	{ 0xf88, 0xf8c },
	{ 0x1000, 0x102a }, // Myanmar
	{ 0x103f, 0x103f },
	{ 0x1050, 0x1055 },
	{ 0x105a, 0x105d },
	{ 0x1061, 0x1061 },
	{ 0x1065, 0x1066 },
	{ 0x106e, 0x1070 },
	{ 0x1075, 0x1081 },
	{ 0x108e, 0x108e },
	{ 0x1100, 0x1248 }, // Hangul Jamo
	{ 0x124a, 0x124d }, // Ethiopic
	{ 0x1250, 0x1256 },
	{ 0x1258, 0x1258 },
	{ 0x125a, 0x125d },
	{ 0x1260, 0x1288 },
	{ 0x128a, 0x128d },
	{ 0x1290, 0x12b0 },
	{ 0x12b2, 0x12b5 },
	{ 0x12b8, 0x12be },
	{ 0x12c0, 0x12c0 },
	{ 0x12c2, 0x12c5 },
	{ 0x12c8, 0x12d6 },
	{ 0x12d8, 0x1310 },
	{ 0x1312, 0x1315 },
	{ 0x1318, 0x135a },
	{ 0x1380, 0x138f }, // Ethiopic Supplement
	{ 0x1401, 0x166c },
	{ 0x166f, 0x167f },
	{ 0x1681, 0x169a },
	{ 0x16a0, 0x16ea }, // Runic
	{ 0x16f1, 0x16f8 },
	{ 0x1700, 0x170c }, // Tagalog
	{ 0x170e, 0x1711 },
	{ 0x1720, 0x1731 }, // Hanunoo
	{ 0x1740, 0x1751 }, // Buhid
	{ 0x1760, 0x176c }, // Tagbanwa
	{ 0x176e, 0x1770 },
	{ 0x1780, 0x17b3 }, // Khmer
	{ 0x17dc, 0x17dc },
	{ 0x1820, 0x1842 },
	{ 0x1844, 0x1878 },
	{ 0x1880, 0x1884 },
	{ 0x1887, 0x18a8 },
	{ 0x18aa, 0x18aa },
	{ 0x18b0, 0x18f5 }, // Unified Canadian Aboriginal Syllabics Extended
	{ 0x1900, 0x191e }, // Limbu
	{ 0x1950, 0x196d }, // Tai Le
	{ 0x1970, 0x1974 },
	{ 0x1980, 0x19ab }, // New Tai Lue
	{ 0x19b0, 0x19c9 },
	{ 0x1a00, 0x1a16 }, // Buginese
	{ 0x1a20, 0x1a54 }, // Tai Tham
	{ 0x1b05, 0x1b33 },
	{ 0x1b45, 0x1b4b },
	{ 0x1b83, 0x1ba0 },
	{ 0x1bae, 0x1baf },
	{ 0x1bba, 0x1be5 },
	{ 0x1c00, 0x1c23 }, // Lepcha
	{ 0x1c4d, 0x1c4f },
	{ 0x1c5a, 0x1c77 },
	{ 0x1ce9, 0x1cec },
	{ 0x1cee, 0x1cf3 },
	{ 0x1cf5, 0x1cf6 },
	{ 0x1cfa, 0x1cfa },
	{ 0x2135, 0x2138 },
	{ 0x2d30, 0x2d67 }, // Tifinagh
	{ 0x2d80, 0x2d96 }, // Ethiopic Extended
	{ 0x2da0, 0x2da6 },
	{ 0x2da8, 0x2dae },
	{ 0x2db0, 0x2db6 },
	{ 0x2db8, 0x2dbe },
	{ 0x2dc0, 0x2dc6 },
	{ 0x2dc8, 0x2dce },
	{ 0x2dd0, 0x2dd6 },
	{ 0x2dd8, 0x2dde },
	{ 0x3006, 0x3006 },
	{ 0x303c, 0x303c },
	{ 0x3041, 0x3096 }, // Hiragana
	{ 0x309f, 0x309f },
	{ 0x30a1, 0x30fa },
	{ 0x30ff, 0x30ff },
	{ 0x3105, 0x312f }, // Bopomofo
	{ 0x3131, 0x318e }, // Hangul Compatibility Jamo
	{ 0x31a0, 0x31bf }, // Bopomofo Extended
	{ 0x31f0, 0x31ff }, // Katakana Phonetic Extensions
	{ 0x3400, 0x3400 }, // CJK Unified Ideographs Extension A
	{ 0x4dbf, 0x4dbf },
	{ 0x4e00, 0x4e00 }, // CJK Unified Ideographs
	{ 0x9ffc, 0x9ffc },
	{ 0xa000, 0xa014 },
	{ 0xa016, 0xa48c },
	{ 0xa4d0, 0xa4f7 },
	{ 0xa500, 0xa60b },
	{ 0xa610, 0xa61f },
	{ 0xa62a, 0xa62b },
	{ 0xa66e, 0xa66e },
	{ 0xa6a0, 0xa6e5 },
	{ 0xa78f, 0xa78f },
	{ 0xa7f7, 0xa7f7 },
	{ 0xa7fb, 0xa801 },
	{ 0xa803, 0xa805 },
	{ 0xa807, 0xa80a },
	{ 0xa80c, 0xa822 },
	{ 0xa840, 0xa873 },
	{ 0xa882, 0xa8b3 },
	{ 0xa8f2, 0xa8f7 },
	{ 0xa8fb, 0xa8fb },
	{ 0xa8fd, 0xa8fe },
	{ 0xa90a, 0xa925 },
	{ 0xa930, 0xa946 },
	{ 0xa960, 0xa97c },
	{ 0xa984, 0xa9b2 },
	{ 0xa9e0, 0xa9e4 },
	{ 0xa9e7, 0xa9ef },
	{ 0xa9fa, 0xa9fe },
	{ 0xaa00, 0xaa28 },
	{ 0xaa40, 0xaa42 },
	{ 0xaa44, 0xaa4b },
	{ 0xaa60, 0xaa6f },
	{ 0xaa71, 0xaa76 },
	{ 0xaa7a, 0xaa7a },
	{ 0xaa7e, 0xaaaf },
	{ 0xaab1, 0xaab1 },
	{ 0xaab5, 0xaab6 },
	{ 0xaab9, 0xaabd },
	{ 0xaac0 | EVEN_BIT, 0xaac2 | EVEN_BIT },
	{ 0xaadb, 0xaadc },
	{ 0xaae0, 0xaaea },
	{ 0xaaf2, 0xaaf2 },
	{ 0xab01, 0xab06 },
	{ 0xab09, 0xab0e },
	{ 0xab11, 0xab16 },
	{ 0xab20, 0xab26 },
	{ 0xab28, 0xab2e },
	{ 0xabc0, 0xabe2 },
	{ 0xac00, 0xac00 },
	{ 0xd7a3, 0xd7a3 },
	{ 0xd7b0, 0xd7c6 },
	{ 0xd7cb, 0xd7fb },
	{ 0xf900, 0xfa6d },
	{ 0xfa70, 0xfad9 },
	{ 0xfb1d, 0xfb1d },
	{ 0xfb1f, 0xfb28 },
	{ 0xfb2a, 0xfb36 },
	{ 0xfb38, 0xfb3c },
	{ 0xfb3e, 0xfb3e },
	{ 0xfb40, 0xfb41 },
	{ 0xfb43, 0xfb44 },
	{ 0xfb46, 0xfbb1 },
	{ 0xfbd3, 0xfd3d },
	{ 0xfd50, 0xfd8f },
	{ 0xfd92, 0xfdc7 },
	{ 0xfdf0, 0xfdfb },
	{ 0xfe70, 0xfe74 },
	{ 0xfe76, 0xfefc },
	{ 0xff66, 0xff6f },
	{ 0xff71, 0xff9d },
	{ 0xffa0, 0xffbe },
	{ 0xffc2, 0xffc7 },
	{ 0xffca, 0xffcf },
	{ 0xffd2, 0xffd7 },
	{ 0xffda, 0xffdc },
	{ 0x10000, 0x1000b }, // Linear B Syllabary
	{ 0x1000d, 0x10026 },
	{ 0x10028, 0x1003a },
	{ 0x1003c, 0x1003d },
	{ 0x1003f, 0x1004d },
	{ 0x10050, 0x1005d },
	{ 0x10080, 0x100fa }, // Linear B Ideograms
	{ 0x10280, 0x1029c }, // Lycian
	{ 0x102a0, 0x102d0 }, // Carian
	{ 0x10300, 0x1031f }, // Old Italic
	{ 0x1032d, 0x10340 },
	{ 0x10342, 0x10349 },
	{ 0x10350, 0x10375 }, // Old Permic
	{ 0x10380, 0x1039d }, // Ugaritic
	{ 0x103a0, 0x103c3 }, // Old Persian
	{ 0x103c8, 0x103cf },
	{ 0x10450, 0x1049d }, // Shavian
	{ 0x10500, 0x10527 }, // Elbasan
	{ 0x10530, 0x10563 }, // Caucasian Albanian
	{ 0x10600, 0x10736 }, // Linear A
	{ 0x10740, 0x10755 },
	{ 0x10760, 0x10767 },
	{ 0x10800, 0x10805 }, // Cypriot Syllabary
	{ 0x10808, 0x10808 },
	{ 0x1080a, 0x10835 },
	{ 0x10837, 0x10838 },
	{ 0x1083c, 0x1083c },
	{ 0x1083f, 0x10855 },
	{ 0x10860, 0x10876 }, // Palmyrene
	{ 0x10880, 0x1089e }, // Nabataean
	{ 0x108e0, 0x108f2 }, // Hatran
	{ 0x108f4, 0x108f5 },
	{ 0x10900, 0x10915 }, // Phoenician
	{ 0x10920, 0x10939 }, // Lydian
	{ 0x10980, 0x109b7 }, // Meroitic Hieroglyphs
	{ 0x109be, 0x109bf },
	{ 0x10a00, 0x10a00 }, // Kharoshthi
	{ 0x10a10, 0x10a13 },
	{ 0x10a15, 0x10a17 },
	{ 0x10a19, 0x10a35 },
	{ 0x10a60, 0x10a7c }, // Old South Arabian
	{ 0x10a80, 0x10a9c }, // Old North Arabian
	{ 0x10ac0, 0x10ac7 }, // Manichaean
	{ 0x10ac9, 0x10ae4 },
	{ 0x10b00, 0x10b35 }, // Avestan
	{ 0x10b40, 0x10b55 }, // Inscriptional Parthian
	{ 0x10b60, 0x10b72 }, // Inscriptional Pahlavi
	{ 0x10b80, 0x10b91 }, // Psalter Pahlavi
	{ 0x10c00, 0x10c48 }, // Old Turkic
	{ 0x10d00, 0x10d23 }, // Hanifi Rohingya
	{ 0x10e80, 0x10ea9 }, // Yezidi
	{ 0x10eb0, 0x10eb1 },
	{ 0x10f00, 0x10f1c }, // Old Sogdian
	{ 0x10f27, 0x10f27 },
	{ 0x10f30, 0x10f45 }, // Sogdian
	{ 0x10fb0, 0x10fc4 }, // Chorasmian
	{ 0x10fe0, 0x10ff6 }, // Elymaic
	{ 0x11003, 0x11037 },
	{ 0x11083, 0x110af },
	{ 0x110d0, 0x110e8 }, // Sora Sompeng
	{ 0x11103, 0x11126 },
	{ 0x11144, 0x11144 },
	{ 0x11147, 0x11147 },
	{ 0x11150, 0x11172 }, // Mahajani
	{ 0x11176, 0x11176 },
	{ 0x11183, 0x111b2 },
	{ 0x111c1, 0x111c4 },
	{ 0x111da | EVEN_BIT, 0x111dc | EVEN_BIT },
	{ 0x11200, 0x11211 }, // Khojki
	{ 0x11213, 0x1122b },
	{ 0x11280, 0x11286 }, // Multani
	{ 0x11288, 0x11288 },
	{ 0x1128a, 0x1128d },
	{ 0x1128f, 0x1129d },
	{ 0x1129f, 0x112a8 },
	{ 0x112b0, 0x112de }, // Khudawadi
	{ 0x11305, 0x1130c },
	{ 0x1130f, 0x11310 },
	{ 0x11313, 0x11328 },
	{ 0x1132a, 0x11330 },
	{ 0x11332, 0x11333 },
	{ 0x11335, 0x11339 },
	{ 0x1133d, 0x1133d },
	{ 0x11350, 0x11350 },
	{ 0x1135d, 0x11361 },
	{ 0x11400, 0x11434 }, // Newa
	{ 0x11447, 0x1144a },
	{ 0x1145f, 0x11461 },
	{ 0x11480, 0x114af }, // Tirhuta
	{ 0x114c4, 0x114c5 },
	{ 0x114c7, 0x114c7 },
	{ 0x11580, 0x115ae }, // Siddham
	{ 0x115d8, 0x115db },
	{ 0x11600, 0x1162f }, // Modi
	{ 0x11644, 0x11644 },
	{ 0x11680, 0x116aa }, // Takri
	{ 0x116b8, 0x116b8 },
	{ 0x11700, 0x1171a }, // Ahom
	{ 0x11800, 0x1182b }, // Dogra
	{ 0x118ff, 0x11906 },
	{ 0x11909, 0x11909 }, // Dives Akuru
	{ 0x1190c, 0x11913 },
	{ 0x11915, 0x11916 },
	{ 0x11918, 0x1192f },
	{ 0x1193f | ODD_BIT, 0x11941 | ODD_BIT },
	{ 0x119a0, 0x119a7 }, // Nandinagari
	{ 0x119aa, 0x119d0 },
	{ 0x119e1 | ODD_BIT, 0x119e3 | ODD_BIT },
	{ 0x11a00, 0x11a00 }, // Zanabazar Square
	{ 0x11a0b, 0x11a32 },
	{ 0x11a3a, 0x11a3a },
	{ 0x11a50, 0x11a50 }, // Soyombo
	{ 0x11a5c, 0x11a89 },
	{ 0x11a9d, 0x11a9d },
	{ 0x11ac0, 0x11af8 }, // Pau Cin Hau
	{ 0x11c00, 0x11c08 }, // Bhaiksuki
	{ 0x11c0a, 0x11c2e },
	{ 0x11c40, 0x11c40 },
	{ 0x11c72, 0x11c8f },
	{ 0x11d00, 0x11d06 }, // Masaram Gondi
	{ 0x11d08, 0x11d09 },
	{ 0x11d0b, 0x11d30 },
	{ 0x11d46, 0x11d46 },
	{ 0x11d60, 0x11d65 }, // Gunjala Gondi
	{ 0x11d67, 0x11d68 },
	{ 0x11d6a, 0x11d89 },
	{ 0x11d98, 0x11d98 },
	{ 0x11ee0, 0x11ef2 }, // Makasar
	{ 0x11fb0, 0x11fb0 }, // Lisu Supplement
	{ 0x12000, 0x12399 }, // Cuneiform
	{ 0x12480, 0x12543 }, // Early Dynastic Cuneiform
	{ 0x13000, 0x1342e }, // Egyptian Hieroglyphs
	{ 0x14400, 0x14646 }, // Anatolian Hieroglyphs
	{ 0x16800, 0x16a38 }, // Bamum Supplement
	{ 0x16a40, 0x16a5e }, // Mro
	{ 0x16ad0, 0x16aed }, // Bassa Vah
	{ 0x16b00, 0x16b2f }, // Pahawh Hmong
	{ 0x16b63, 0x16b77 },
	{ 0x16b7d, 0x16b8f },
	{ 0x16f00, 0x16f4a }, // Miao
	{ 0x16f50, 0x16f50 },
	{ 0x17000, 0x17000 }, // Tangut
	{ 0x187f7, 0x187f7 },
	{ 0x18800, 0x18cd5 }, // Tangut Components
	{ 0x18d00, 0x18d00 }, // Tangut Supplement
	{ 0x18d08, 0x18d08 },
	{ 0x1b000, 0x1b11e }, // Kana Supplement
	{ 0x1b150, 0x1b152 }, // Small Kana Extension
	{ 0x1b164, 0x1b167 },
	{ 0x1b170, 0x1b2fb }, // Nushu
	{ 0x1bc00, 0x1bc6a }, // Duployan
	{ 0x1bc70, 0x1bc7c },
	{ 0x1bc80, 0x1bc88 },
	{ 0x1bc90, 0x1bc99 },
	{ 0x1e100, 0x1e12c }, // Nyiakeng Puachue Hmong
	{ 0x1e14e, 0x1e14e },
	{ 0x1e2c0, 0x1e2eb }, // Wancho
	{ 0x1e800, 0x1e8c4 }, // Mende Kikakui
	{ 0x1ee00, 0x1ee03 }, // Arabic Mathematical Alphabetic Symbols
	{ 0x1ee05, 0x1ee1f },
	{ 0x1ee21, 0x1ee22 },
	{ 0x1ee24, 0x1ee24 },
	{ 0x1ee27, 0x1ee27 },
	{ 0x1ee29, 0x1ee32 },
	{ 0x1ee34, 0x1ee37 },
	{ 0x1ee39 | ODD_BIT, 0x1ee3b | ODD_BIT },
	{ 0x1ee42, 0x1ee42 },
	{ 0x1ee47 | ODD_BIT, 0x1ee4b | ODD_BIT },
	{ 0x1ee4d, 0x1ee4f },
	{ 0x1ee51, 0x1ee52 },
	{ 0x1ee54, 0x1ee54 },
	{ 0x1ee57 | ODD_BIT, 0x1ee5f | ODD_BIT },
	{ 0x1ee61, 0x1ee62 },
	{ 0x1ee64, 0x1ee64 },
	{ 0x1ee67, 0x1ee6a },
	{ 0x1ee6c, 0x1ee72 },
	{ 0x1ee74, 0x1ee77 },
	{ 0x1ee79, 0x1ee7c },
	{ 0x1ee7e, 0x1ee7e },
	{ 0x1ee80, 0x1ee89 },
	{ 0x1ee8b, 0x1ee9b },
	{ 0x1eea1, 0x1eea3 },
	{ 0x1eea5, 0x1eea9 },
	{ 0x1eeab, 0x1eebb },
	{ 0x20000, 0x20000 }, // CJK Unified Ideographs Extension B
	{ 0x2a6dd, 0x2a6dd },
	{ 0x2a700, 0x2a700 }, // CJK Unified Ideographs Extension C
	{ 0x2b734, 0x2b734 },
	{ 0x2b740, 0x2b740 }, // CJK Unified Ideographs Extension D
	{ 0x2b81d, 0x2b81d },
	{ 0x2b820, 0x2b820 }, // CJK Unified Ideographs Extension E
	{ 0x2cea1, 0x2cea1 },
	{ 0x2ceb0, 0x2ceb0 }, // CJK Unified Ideographs Extension F
	{ 0x2ebe0, 0x2ebe0 },
	{ 0x2f800, 0x2fa1d }, // CJK Compatibility Ideographs Supplement
	{ 0x30000, 0x30000 }, // CJK Unified Ideographs Extension G
	{ 0x3134a, 0x3134a }
};

static constexpr const utf_range titlecase_letters[] = { //  Lt
	{ 0x1c5, 0x1c5 },
	{ 0x1c8, 0x1c8 },
	{ 0x1cb, 0x1cb },
	{ 0x1f2, 0x1f2 },
	{ 0x1f88, 0x1f8f },
	{ 0x1f98, 0x1f9f },
	{ 0x1fa8, 0x1faf },
	{ 0x1fbc, 0x1fbc },
	{ 0x1fcc, 0x1fcc },
	{ 0x1ffc, 0x1ffc }
};

static constexpr const utf_range uppercase_letters[] = { //  Lu
	{ 0x41, 0x5a },
	{ 0xc0, 0xd6 },
	{ 0xd8, 0xde },
	{ 0x100 | EVEN_BIT, 0x136 | EVEN_BIT }, // Latin Extended-A
	{ 0x139 | ODD_BIT, 0x147 | ODD_BIT },
	{ 0x14a | EVEN_BIT, 0x176 | EVEN_BIT },
	{ 0x178, 0x179 },
	{ 0x17b | ODD_BIT, 0x17d | ODD_BIT },
	{ 0x181, 0x182 }, // Latin Extended-B
	{ 0x184, 0x184 },
	{ 0x186, 0x187 },
	{ 0x189, 0x18b },
	{ 0x18e, 0x191 },
	{ 0x193, 0x194 },
	{ 0x196, 0x198 },
	{ 0x19c, 0x19d },
	{ 0x19f, 0x1a0 },
	{ 0x1a2 | EVEN_BIT, 0x1a4 | EVEN_BIT },
	{ 0x1a6, 0x1a7 },
	{ 0x1a9, 0x1a9 },
	{ 0x1ac, 0x1ac },
	{ 0x1ae, 0x1af },
	{ 0x1b1, 0x1b3 },
	{ 0x1b5, 0x1b5 },
	{ 0x1b7, 0x1b8 },
	{ 0x1bc, 0x1bc },
	{ 0x1c4, 0x1c4 },
	{ 0x1c7, 0x1c7 },
	{ 0x1ca, 0x1ca },
	{ 0x1cd | ODD_BIT, 0x1db | ODD_BIT },
	{ 0x1de | EVEN_BIT, 0x1ee | EVEN_BIT },
	{ 0x1f1, 0x1f1 },
	{ 0x1f4, 0x1f4 },
	{ 0x1f6, 0x1f8 },
	{ 0x1fa | EVEN_BIT, 0x232 | EVEN_BIT },
	{ 0x23a, 0x23b },
	{ 0x23d, 0x23e },
	{ 0x241, 0x241 },
	{ 0x243, 0x246 },
	{ 0x248 | EVEN_BIT, 0x24e | EVEN_BIT },
	{ 0x370 | EVEN_BIT, 0x372 | EVEN_BIT }, // Greek and Coptic
	{ 0x376, 0x376 },
	{ 0x37f, 0x37f },
	{ 0x386, 0x386 },
	{ 0x388, 0x38a },
	{ 0x38c, 0x38c },
	{ 0x38e, 0x38f },
	{ 0x391, 0x3a1 },
	{ 0x3a3, 0x3ab },
	{ 0x3cf, 0x3cf },
	{ 0x3d2, 0x3d4 },
	{ 0x3d8 | EVEN_BIT, 0x3ee | EVEN_BIT },
	{ 0x3f4, 0x3f4 },
	{ 0x3f7, 0x3f7 },
	{ 0x3f9, 0x3fa },
	{ 0x3fd, 0x42f },
	{ 0x460 | EVEN_BIT, 0x480 | EVEN_BIT },
	{ 0x48a | EVEN_BIT, 0x4be | EVEN_BIT },
	{ 0x4c0, 0x4c1 },
	{ 0x4c3 | ODD_BIT, 0x4cd | ODD_BIT },
	{ 0x4d0 | EVEN_BIT, 0x52e | EVEN_BIT },
	{ 0x531, 0x556 }, // Armenian
	{ 0x10a0, 0x10c5 }, // Georgian
	{ 0x10c7, 0x10c7 },
	{ 0x10cd, 0x10cd },
	{ 0x13a0, 0x13f5 }, // Cherokee
	{ 0x1c90, 0x1cba }, // Georgian Extended
	{ 0x1cbd, 0x1cbf },
	{ 0x1e00 | EVEN_BIT, 0x1e94 | EVEN_BIT }, // Latin Extended Additional
	{ 0x1e9e | EVEN_BIT, 0x1efe | EVEN_BIT },
	{ 0x1f08, 0x1f0f }, // Greek Extended
	{ 0x1f18, 0x1f1d },
	{ 0x1f28, 0x1f2f },
	{ 0x1f38, 0x1f3f },
	{ 0x1f48, 0x1f4d },
	{ 0x1f59 | ODD_BIT, 0x1f5f | ODD_BIT },
	{ 0x1f68, 0x1f6f },
	{ 0x1fb8, 0x1fbb },
	{ 0x1fc8, 0x1fcb },
	{ 0x1fd8, 0x1fdb },
	{ 0x1fe8, 0x1fec },
	{ 0x1ff8, 0x1ffb },
	{ 0x2102, 0x2102 },
	{ 0x2107, 0x2107 },
	{ 0x210b, 0x210d },
	{ 0x2110, 0x2112 },
	{ 0x2115, 0x2115 },
	{ 0x2119, 0x211d },
	{ 0x2124 | EVEN_BIT, 0x2128 | EVEN_BIT },
	{ 0x212a, 0x212d },
	{ 0x2130, 0x2133 },
	{ 0x213e, 0x213f },
	{ 0x2145, 0x2145 },
	{ 0x2183, 0x2183 },
	{ 0x2c00, 0x2c2e }, // Glagolitic
	{ 0x2c60, 0x2c60 }, // Latin Extended-C
	{ 0x2c62, 0x2c64 },
	{ 0x2c67 | ODD_BIT, 0x2c6b | ODD_BIT },
	{ 0x2c6d, 0x2c70 },
	{ 0x2c72, 0x2c72 },
	{ 0x2c75, 0x2c75 },
	{ 0x2c7e, 0x2c80 },
	{ 0x2c82 | EVEN_BIT, 0x2ce2 | EVEN_BIT },
	{ 0x2ceb | ODD_BIT, 0x2ced | ODD_BIT },
	{ 0x2cf2, 0x2cf2 },
	{ 0xa640 | EVEN_BIT, 0xa66c | EVEN_BIT },
	{ 0xa680 | EVEN_BIT, 0xa69a | EVEN_BIT },
	{ 0xa722 | EVEN_BIT, 0xa72e | EVEN_BIT },
	{ 0xa732 | EVEN_BIT, 0xa76e | EVEN_BIT },
	{ 0xa779 | ODD_BIT, 0xa77b | ODD_BIT },
	{ 0xa77d, 0xa77e },
	{ 0xa780 | EVEN_BIT, 0xa786 | EVEN_BIT },
	{ 0xa78b | ODD_BIT, 0xa78d | ODD_BIT },
	{ 0xa790 | EVEN_BIT, 0xa792 | EVEN_BIT },
	{ 0xa796 | EVEN_BIT, 0xa7a8 | EVEN_BIT },
	{ 0xa7aa, 0xa7ae },
	{ 0xa7b0, 0xa7b4 },
	{ 0xa7b6 | EVEN_BIT, 0xa7be | EVEN_BIT },
	{ 0xa7c2, 0xa7c2 },
	{ 0xa7c4, 0xa7c7 },
	{ 0xa7c9, 0xa7c9 },
	{ 0xa7f5, 0xa7f5 },
	{ 0xff21, 0xff3a },
	{ 0x10400, 0x10427 }, // Deseret
	{ 0x104b0, 0x104d3 }, // Osage
	{ 0x10c80, 0x10cb2 }, // Old Hungarian
	{ 0x118a0, 0x118bf }, // Warang Citi
	{ 0x16e40, 0x16e5f }, // Medefaidrin
	{ 0x1d400, 0x1d419 }, // Mathematical Alphanumeric Symbols
	{ 0x1d434, 0x1d44d },
	{ 0x1d468, 0x1d481 },
	{ 0x1d49c, 0x1d49c },
	{ 0x1d49e, 0x1d49f },
	{ 0x1d4a2, 0x1d4a2 },
	{ 0x1d4a5, 0x1d4a6 },
	{ 0x1d4a9, 0x1d4ac },
	{ 0x1d4ae, 0x1d4b5 },
	{ 0x1d4d0, 0x1d4e9 },
	{ 0x1d504, 0x1d505 },
	{ 0x1d507, 0x1d50a },
	{ 0x1d50d, 0x1d514 },
	{ 0x1d516, 0x1d51c },
	{ 0x1d538, 0x1d539 },
	{ 0x1d53b, 0x1d53e },
	{ 0x1d540, 0x1d544 },
	{ 0x1d546, 0x1d546 },
	{ 0x1d54a, 0x1d550 },
	{ 0x1d56c, 0x1d585 },
	{ 0x1d5a0, 0x1d5b9 },
	{ 0x1d5d4, 0x1d5ed },
	{ 0x1d608, 0x1d621 },
	{ 0x1d63c, 0x1d655 },
	{ 0x1d670, 0x1d689 },
	{ 0x1d6a8, 0x1d6c0 },
	{ 0x1d6e2, 0x1d6fa },
	{ 0x1d71c, 0x1d734 },
	{ 0x1d756, 0x1d76e },
	{ 0x1d790, 0x1d7a8 },
	{ 0x1d7ca, 0x1d7ca },
	{ 0x1e900, 0x1e921 } // Adlam
};

static constexpr const utf_range spacing_combining_marks[] = { //  Mc
	{ 0x903, 0x903 }, // Devanagari
	{ 0x93b, 0x93b },
	{ 0x93e, 0x940 },
	{ 0x949, 0x94c },
	{ 0x94e, 0x94f },
	{ 0x982, 0x983 },
	{ 0x9be, 0x9c0 },
	{ 0x9c7, 0x9c8 },
	{ 0x9cb, 0x9cc },
	{ 0x9d7, 0x9d7 },
	{ 0xa03, 0xa03 },
	{ 0xa3e, 0xa40 },
	{ 0xa83, 0xa83 },
	{ 0xabe, 0xac0 },
	{ 0xac9, 0xac9 },
	{ 0xacb, 0xacc },
	{ 0xb02, 0xb03 },
	{ 0xb3e | EVEN_BIT, 0xb40 | EVEN_BIT },
	{ 0xb47, 0xb48 },
	{ 0xb4b, 0xb4c },
	{ 0xb57, 0xb57 },
	{ 0xbbe, 0xbbf },
	{ 0xbc1, 0xbc2 },
	{ 0xbc6, 0xbc8 },
	{ 0xbca, 0xbcc },
	{ 0xbd7, 0xbd7 },
	{ 0xc01, 0xc03 },
	{ 0xc41, 0xc44 },
	{ 0xc82, 0xc83 },
	{ 0xcbe, 0xcbe },
	{ 0xcc0, 0xcc4 },
	{ 0xcc7, 0xcc8 },
	{ 0xcca, 0xccb },
	{ 0xcd5, 0xcd6 },
	{ 0xd02, 0xd03 },
	{ 0xd3e, 0xd40 },
	{ 0xd46, 0xd48 },
	{ 0xd4a, 0xd4c },
	{ 0xd57, 0xd57 },
	{ 0xd82, 0xd83 },
	{ 0xdcf, 0xdd1 },
	{ 0xdd8, 0xddf },
	{ 0xdf2, 0xdf3 },
	{ 0xf3e, 0xf3f },
	{ 0xf7f, 0xf7f },
	{ 0x102b, 0x102c },
	{ 0x1031, 0x1031 },
	{ 0x1038, 0x1038 },
	{ 0x103b, 0x103c },
	{ 0x1056, 0x1057 },
	{ 0x1062, 0x1064 },
	{ 0x1067, 0x106d },
	{ 0x1083, 0x1084 },
	{ 0x1087, 0x108c },
	{ 0x108f, 0x108f },
	{ 0x109a, 0x109c },
	{ 0x17b6, 0x17b6 },
	{ 0x17be, 0x17c5 },
	{ 0x17c7, 0x17c8 },
	{ 0x1923, 0x1926 },
	{ 0x1929, 0x192b },
	{ 0x1930, 0x1931 },
	{ 0x1933, 0x1938 },
	{ 0x1a19, 0x1a1a },
	{ 0x1a55 | ODD_BIT, 0x1a57 | ODD_BIT },
	{ 0x1a61, 0x1a61 },
	{ 0x1a63, 0x1a64 },
	{ 0x1a6d, 0x1a72 },
	{ 0x1b04, 0x1b04 },
	{ 0x1b35, 0x1b35 },
	{ 0x1b3b, 0x1b3b },
	{ 0x1b3d, 0x1b41 },
	{ 0x1b43, 0x1b44 },
	{ 0x1b82, 0x1b82 },
	{ 0x1ba1, 0x1ba1 },
	{ 0x1ba6, 0x1ba7 },
	{ 0x1baa, 0x1baa },
	{ 0x1be7, 0x1be7 },
	{ 0x1bea, 0x1bec },
	{ 0x1bee, 0x1bee },
	{ 0x1bf2, 0x1bf3 },
	{ 0x1c24, 0x1c2b },
	{ 0x1c34, 0x1c35 },
	{ 0x1ce1, 0x1ce1 },
	{ 0x1cf7, 0x1cf7 },
	{ 0x302e, 0x302f },
	{ 0xa823, 0xa824 },
	{ 0xa827, 0xa827 },
	{ 0xa880, 0xa881 },
	{ 0xa8b4, 0xa8c3 },
	{ 0xa952, 0xa953 },
	{ 0xa983, 0xa983 },
	{ 0xa9b4, 0xa9b5 },
	{ 0xa9ba, 0xa9bb },
	{ 0xa9be, 0xa9c0 },
	{ 0xaa2f, 0xaa30 },
	{ 0xaa33, 0xaa34 },
	{ 0xaa4d, 0xaa4d },
	{ 0xaa7b | ODD_BIT, 0xaa7d | ODD_BIT },
	{ 0xaaeb, 0xaaeb },
	{ 0xaaee, 0xaaef },
	{ 0xaaf5, 0xaaf5 },
	{ 0xabe3, 0xabe4 },
	{ 0xabe6, 0xabe7 },
	{ 0xabe9, 0xabea },
	{ 0xabec, 0xabec },
	{ 0x11000 | EVEN_BIT, 0x11002 | EVEN_BIT }, // Brahmi
	{ 0x11082, 0x11082 }, // Kaithi
	{ 0x110b0, 0x110b2 },
	{ 0x110b7, 0x110b8 },
	{ 0x1112c, 0x1112c },
	{ 0x11145, 0x11146 },
	{ 0x11182, 0x11182 },
	{ 0x111b3, 0x111b5 },
	{ 0x111bf, 0x111c0 },
	{ 0x111ce, 0x111ce },
	{ 0x1122c, 0x1122e },
	{ 0x11232, 0x11233 },
	{ 0x11235, 0x11235 },
	{ 0x112e0, 0x112e2 },
	{ 0x11302, 0x11303 },
	{ 0x1133e, 0x1133f },
	{ 0x11341, 0x11344 },
	{ 0x11347, 0x11348 },
	{ 0x1134b, 0x1134d },
	{ 0x11357, 0x11357 },
	{ 0x11362, 0x11363 },
	{ 0x11435, 0x11437 },
	{ 0x11440, 0x11441 },
	{ 0x11445, 0x11445 },
	{ 0x114b0, 0x114b2 },
	{ 0x114b9, 0x114b9 },
	{ 0x114bb, 0x114be },
	{ 0x114c1, 0x114c1 },
	{ 0x115af, 0x115b1 },
	{ 0x115b8, 0x115bb },
	{ 0x115be, 0x115be },
	{ 0x11630, 0x11632 },
	{ 0x1163b, 0x1163c },
	{ 0x1163e, 0x1163e },
	{ 0x116ac, 0x116ac },
	{ 0x116ae, 0x116af },
	{ 0x116b6, 0x116b6 },
	{ 0x11720, 0x11721 },
	{ 0x11726, 0x11726 },
	{ 0x1182c, 0x1182e },
	{ 0x11838, 0x11838 },
	{ 0x11930, 0x11935 },
	{ 0x11937, 0x11938 },
	{ 0x1193d, 0x1193d },
	{ 0x11940 | EVEN_BIT, 0x11942 | EVEN_BIT },
	{ 0x119d1, 0x119d3 },
	{ 0x119dc, 0x119df },
	{ 0x119e4, 0x119e4 },
	{ 0x11a39, 0x11a39 },
	{ 0x11a57, 0x11a58 },
	{ 0x11a97, 0x11a97 },
	{ 0x11c2f, 0x11c2f },
	{ 0x11c3e, 0x11c3e },
	{ 0x11ca9, 0x11ca9 },
	{ 0x11cb1, 0x11cb1 },
	{ 0x11cb4, 0x11cb4 },
	{ 0x11d8a, 0x11d8e },
	{ 0x11d93, 0x11d94 },
	{ 0x11d96, 0x11d96 },
	{ 0x11ef5, 0x11ef6 },
	{ 0x16f51, 0x16f87 },
	{ 0x16ff0, 0x16ff1 },
	{ 0x1d165, 0x1d166 },
	{ 0x1d16d, 0x1d172 }
};

static constexpr const utf_range enclosing_marks[] = { //  Me
	{ 0x488, 0x489 },
	{ 0x1abe, 0x1abe },
	{ 0x20dd, 0x20e0 },
	{ 0x20e2, 0x20e4 },
	{ 0xa670, 0xa672 }
};

static constexpr const utf_range nonspacing_marks[] = { //  Mn
	{ 0x300, 0x36f }, // Combining Diacritical Marks
	{ 0x483, 0x487 },
	{ 0x591, 0x5bd }, // Hebrew
	{ 0x5bf, 0x5bf },
	{ 0x5c1, 0x5c2 },
	{ 0x5c4, 0x5c5 },
	{ 0x5c7, 0x5c7 },
	{ 0x610, 0x61a },
	{ 0x64b, 0x65f },
	{ 0x670, 0x670 },
	{ 0x6d6, 0x6dc },
	{ 0x6df, 0x6e4 },
	{ 0x6e7, 0x6e8 },
	{ 0x6ea, 0x6ed },
	{ 0x711, 0x711 },
	{ 0x730, 0x74a },
	{ 0x7a6, 0x7b0 }, // Thaana
	{ 0x7eb, 0x7f3 },
	{ 0x7fd, 0x7fd },
	{ 0x816, 0x819 },
	{ 0x81b, 0x823 },
	{ 0x825, 0x827 },
	{ 0x829, 0x82d },
	{ 0x859, 0x85b },
	{ 0x8d3, 0x8e1 },
	{ 0x8e3, 0x902 },
	{ 0x93a | EVEN_BIT, 0x93c | EVEN_BIT },
	{ 0x941, 0x948 },
	{ 0x94d, 0x94d },
	{ 0x951, 0x957 },
	{ 0x962, 0x963 },
	{ 0x981, 0x981 }, // Bengali
	{ 0x9bc, 0x9bc },
	{ 0x9c1, 0x9c4 },
	{ 0x9cd, 0x9cd },
	{ 0x9e2, 0x9e3 },
	{ 0x9fe, 0x9fe },
	{ 0xa01, 0xa02 }, // Gurmukhi
	{ 0xa3c, 0xa3c },
	{ 0xa41, 0xa42 },
	{ 0xa47, 0xa48 },
	{ 0xa4b, 0xa4d },
	{ 0xa51, 0xa51 },
	{ 0xa70, 0xa71 },
	{ 0xa75, 0xa75 },
	{ 0xa81, 0xa82 }, // Gujarati
	{ 0xabc, 0xabc },
	{ 0xac1, 0xac5 },
	{ 0xac7, 0xac8 },
	{ 0xacd, 0xacd },
	{ 0xae2, 0xae3 },
	{ 0xafa, 0xaff },
	{ 0xb01, 0xb01 }, // Oriya
	{ 0xb3c, 0xb3c },
	{ 0xb3f, 0xb3f },
	{ 0xb41, 0xb44 },
	{ 0xb4d, 0xb4d },
	{ 0xb55, 0xb56 },
	{ 0xb62, 0xb63 },
	{ 0xb82, 0xb82 }, // Tamil
	{ 0xbc0, 0xbc0 },
	{ 0xbcd, 0xbcd },
	{ 0xc00, 0xc00 }, // Telugu
	{ 0xc04, 0xc04 },
	{ 0xc3e, 0xc40 },
	{ 0xc46, 0xc48 },
	{ 0xc4a, 0xc4d },
	{ 0xc55, 0xc56 },
	{ 0xc62, 0xc63 },
	{ 0xc81, 0xc81 },
	{ 0xcbc, 0xcbc },
	{ 0xcbf, 0xcbf },
	{ 0xcc6, 0xcc6 },
	{ 0xccc, 0xccd },
	{ 0xce2, 0xce3 },
	{ 0xd00, 0xd01 }, // Malayalam
	{ 0xd3b, 0xd3c },
	{ 0xd41, 0xd44 },
	{ 0xd4d, 0xd4d },
	{ 0xd62, 0xd63 },
	{ 0xd81, 0xd81 }, // Sinhala
	{ 0xdca, 0xdca },
	{ 0xdd2, 0xdd4 },
	{ 0xdd6, 0xdd6 },
	{ 0xe31, 0xe31 },
	{ 0xe34, 0xe3a },
	{ 0xe47, 0xe4e },
	{ 0xeb1, 0xeb1 },
	{ 0xeb4, 0xebc },
	{ 0xec8, 0xecd },
	{ 0xf18, 0xf19 },
	{ 0xf35 | ODD_BIT, 0xf39 | ODD_BIT },
	{ 0xf71, 0xf7e },
	{ 0xf80, 0xf84 },
	{ 0xf86, 0xf87 },
	{ 0xf8d, 0xf97 },
	{ 0xf99, 0xfbc },
	{ 0xfc6, 0xfc6 },
	{ 0x102d, 0x1030 },
	{ 0x1032, 0x1037 },
	{ 0x1039, 0x103a },
	{ 0x103d, 0x103e },
	{ 0x1058, 0x1059 },
	{ 0x105e, 0x1060 },
	{ 0x1071, 0x1074 },
	{ 0x1082, 0x1082 },
	{ 0x1085, 0x1086 },
	{ 0x108d, 0x108d },
	{ 0x109d, 0x109d },
	{ 0x135d, 0x135f },
	{ 0x1712, 0x1714 },
	{ 0x1732, 0x1734 },
	{ 0x1752, 0x1753 },
	{ 0x1772, 0x1773 },
	{ 0x17b4, 0x17b5 },
	{ 0x17b7, 0x17bd },
	{ 0x17c6, 0x17c6 },
	{ 0x17c9, 0x17d3 },
	{ 0x17dd, 0x17dd },
	{ 0x180b, 0x180d },
	{ 0x1885, 0x1886 },
	{ 0x18a9, 0x18a9 },
	{ 0x1920, 0x1922 },
	{ 0x1927, 0x1928 },
	{ 0x1932, 0x1932 },
	{ 0x1939, 0x193b },
	{ 0x1a17, 0x1a18 },
	{ 0x1a1b, 0x1a1b },
	{ 0x1a56, 0x1a56 },
	{ 0x1a58, 0x1a5e },
	{ 0x1a60 | EVEN_BIT, 0x1a62 | EVEN_BIT },
	{ 0x1a65, 0x1a6c },
	{ 0x1a73, 0x1a7c },
	{ 0x1a7f, 0x1a7f },
	{ 0x1ab0, 0x1abd }, // Combining Diacritical Marks Extended
	{ 0x1abf, 0x1ac0 },
	{ 0x1b00, 0x1b03 }, // Balinese
	{ 0x1b34, 0x1b34 },
	{ 0x1b36, 0x1b3a },
	{ 0x1b3c, 0x1b3c },
	{ 0x1b42, 0x1b42 },
	{ 0x1b6b, 0x1b73 },
	{ 0x1b80, 0x1b81 }, // Sundanese
	{ 0x1ba2, 0x1ba5 },
	{ 0x1ba8, 0x1ba9 },
	{ 0x1bab, 0x1bad },
	{ 0x1be6, 0x1be6 }, // Batak
	{ 0x1be8, 0x1be9 },
	{ 0x1bed, 0x1bed },
	{ 0x1bef, 0x1bf1 },
	{ 0x1c2c, 0x1c33 },
	{ 0x1c36, 0x1c37 },
	{ 0x1cd0, 0x1cd2 }, // Vedic Extensions
	{ 0x1cd4, 0x1ce0 },
	{ 0x1ce2, 0x1ce8 },
	{ 0x1ced, 0x1ced },
	{ 0x1cf4, 0x1cf4 },
	{ 0x1cf8, 0x1cf9 },
	{ 0x1dc0, 0x1df9 }, // Combining Diacritical Marks Supplement
	{ 0x1dfb, 0x1dff },
	{ 0x20d0, 0x20dc }, // Combining Diacritical Marks for Symbols
	{ 0x20e1, 0x20e1 },
	{ 0x20e5, 0x20f0 },
	{ 0x2cef, 0x2cf1 },
	{ 0x2d7f, 0x2d7f },
	{ 0x2de0, 0x2dff }, // Cyrillic Extended-A
	{ 0x302a, 0x302d },
	{ 0x3099, 0x309a },
	{ 0xa66f, 0xa66f },
	{ 0xa674, 0xa67d },
	{ 0xa69e, 0xa69f },
	{ 0xa6f0, 0xa6f1 },
	{ 0xa802, 0xa802 },
	{ 0xa806, 0xa806 },
	{ 0xa80b, 0xa80b },
	{ 0xa825, 0xa826 },
	{ 0xa82c, 0xa82c },
	{ 0xa8c4, 0xa8c5 },
	{ 0xa8e0, 0xa8f1 },
	{ 0xa8ff, 0xa8ff },
	{ 0xa926, 0xa92d },
	{ 0xa947, 0xa951 },
	{ 0xa980, 0xa982 },
	{ 0xa9b3, 0xa9b3 },
	{ 0xa9b6, 0xa9b9 },
	{ 0xa9bc, 0xa9bd },
	{ 0xa9e5, 0xa9e5 },
	{ 0xaa29, 0xaa2e },
	{ 0xaa31, 0xaa32 },
	{ 0xaa35, 0xaa36 },
	{ 0xaa43, 0xaa43 },
	{ 0xaa4c, 0xaa4c },
	{ 0xaa7c, 0xaa7c },
	{ 0xaab0, 0xaab0 },
	{ 0xaab2, 0xaab4 },
	{ 0xaab7, 0xaab8 },
	{ 0xaabe, 0xaabf },
	{ 0xaac1, 0xaac1 },
	{ 0xaaec, 0xaaed },
	{ 0xaaf6, 0xaaf6 },
	{ 0xabe5, 0xabe5 },
	{ 0xabe8, 0xabe8 },
	{ 0xabed, 0xabed },
	{ 0xfb1e, 0xfb1e },
	{ 0xfe00, 0xfe0f },
	{ 0xfe20, 0xfe2f },
	{ 0x101fd, 0x101fd },
	{ 0x102e0, 0x102e0 }, // Coptic Epact Numbers
	{ 0x10376, 0x1037a },
	{ 0x10a01, 0x10a03 },
	{ 0x10a05, 0x10a06 },
	{ 0x10a0c, 0x10a0f },
	{ 0x10a38, 0x10a3a },
	{ 0x10a3f, 0x10a3f },
	{ 0x10ae5, 0x10ae6 },
	{ 0x10d24, 0x10d27 },
	{ 0x10eab, 0x10eac },
	{ 0x10f46, 0x10f50 },
	{ 0x11001, 0x11001 },
	{ 0x11038, 0x11046 },
	{ 0x1107f, 0x11081 },
	{ 0x110b3, 0x110b6 },
	{ 0x110b9, 0x110ba },
	{ 0x11100, 0x11102 }, // Chakma
	{ 0x11127, 0x1112b },
	{ 0x1112d, 0x11134 },
	{ 0x11173, 0x11173 },
	{ 0x11180, 0x11181 }, // Sharada
	{ 0x111b6, 0x111be },
	{ 0x111c9, 0x111cc },
	{ 0x111cf, 0x111cf },
	{ 0x1122f, 0x11231 },
	{ 0x11234, 0x11234 },
	{ 0x11236, 0x11237 },
	{ 0x1123e, 0x1123e },
	{ 0x112df, 0x112df },
	{ 0x112e3, 0x112ea },
	{ 0x11300, 0x11301 }, // Grantha
	{ 0x1133b, 0x1133c },
	{ 0x11340, 0x11340 },
	{ 0x11366, 0x1136c },
	{ 0x11370, 0x11374 },
	{ 0x11438, 0x1143f },
	{ 0x11442, 0x11444 },
	{ 0x11446, 0x11446 },
	{ 0x1145e, 0x1145e },
	{ 0x114b3, 0x114b8 },
	{ 0x114ba, 0x114ba },
	{ 0x114bf, 0x114c0 },
	{ 0x114c2, 0x114c3 },
	{ 0x115b2, 0x115b5 },
	{ 0x115bc, 0x115bd },
	{ 0x115bf, 0x115c0 },
	{ 0x115dc, 0x115dd },
	{ 0x11633, 0x1163a },
	{ 0x1163d, 0x1163d },
	{ 0x1163f, 0x11640 },
	{ 0x116ab | ODD_BIT, 0x116ad | ODD_BIT },
	{ 0x116b0, 0x116b5 },
	{ 0x116b7, 0x116b7 },
	{ 0x1171d, 0x1171f },
	{ 0x11722, 0x11725 },
	{ 0x11727, 0x1172b },
	{ 0x1182f, 0x11837 },
	{ 0x11839, 0x1183a },
	{ 0x1193b, 0x1193c },
	{ 0x1193e, 0x1193e },
	{ 0x11943, 0x11943 },
	{ 0x119d4, 0x119d7 },
	{ 0x119da, 0x119db },
	{ 0x119e0, 0x119e0 },
	{ 0x11a01, 0x11a0a },
	{ 0x11a33, 0x11a38 },
	{ 0x11a3b, 0x11a3e },
	{ 0x11a47, 0x11a47 },
	{ 0x11a51, 0x11a56 },
	{ 0x11a59, 0x11a5b },
	{ 0x11a8a, 0x11a96 },
	{ 0x11a98, 0x11a99 },
	{ 0x11c30, 0x11c36 },
	{ 0x11c38, 0x11c3d },
	{ 0x11c3f, 0x11c3f },
	{ 0x11c92, 0x11ca7 },
	{ 0x11caa, 0x11cb0 },
	{ 0x11cb2, 0x11cb3 },
	{ 0x11cb5, 0x11cb6 },
	{ 0x11d31, 0x11d36 },
	{ 0x11d3a, 0x11d3a },
	{ 0x11d3c, 0x11d3d },
	{ 0x11d3f, 0x11d45 },
	{ 0x11d47, 0x11d47 },
	{ 0x11d90, 0x11d91 },
	{ 0x11d95 | ODD_BIT, 0x11d97 | ODD_BIT },
	{ 0x11ef3, 0x11ef4 },
	{ 0x16af0, 0x16af4 },
	{ 0x16b30, 0x16b36 },
	{ 0x16f4f, 0x16f4f },
	{ 0x16f8f, 0x16f92 },
	{ 0x16fe4, 0x16fe4 },
	{ 0x1bc9d, 0x1bc9e },
	{ 0x1d167, 0x1d169 },
	{ 0x1d17b, 0x1d182 },
	{ 0x1d185, 0x1d18b },
	{ 0x1d1aa, 0x1d1ad },
	{ 0x1d242, 0x1d244 },
	{ 0x1da00, 0x1da36 },
	{ 0x1da3b, 0x1da6c },
	{ 0x1da75, 0x1da75 },
	{ 0x1da84, 0x1da84 },
	{ 0x1da9b, 0x1da9f },
	{ 0x1daa1, 0x1daaf },
	{ 0x1e000, 0x1e006 }, // Glagolitic Supplement
	{ 0x1e008, 0x1e018 },
	{ 0x1e01b, 0x1e021 },
	{ 0x1e023, 0x1e024 },
	{ 0x1e026, 0x1e02a },
	{ 0x1e130, 0x1e136 },
	{ 0x1e2ec, 0x1e2ef },
	{ 0x1e8d0, 0x1e8d6 },
	{ 0x1e944, 0x1e94a },
	{ 0xe0100, 0xe01ef }
};

static constexpr const utf_range decimal_digits[] = { //  Nd
	{ 0x30, 0x39 },
	{ 0x660, 0x669 },
	{ 0x6f0, 0x6f9 },
	{ 0x7c0, 0x7c9 }, // NKo
	{ 0x966, 0x96f },
	{ 0x9e6, 0x9ef },
	{ 0xa66, 0xa6f },
	{ 0xae6, 0xaef },
	{ 0xb66, 0xb6f },
	{ 0xbe6, 0xbef },
	{ 0xc66, 0xc6f },
	{ 0xce6, 0xcef },
	{ 0xd66, 0xd6f },
	{ 0xde6, 0xdef },
	{ 0xe50, 0xe59 },
	{ 0xed0, 0xed9 },
	{ 0xf20, 0xf29 },
	{ 0x1040, 0x1049 },
	{ 0x1090, 0x1099 },
	{ 0x17e0, 0x17e9 },
	{ 0x1810, 0x1819 },
	{ 0x1946, 0x194f },
	{ 0x19d0, 0x19d9 },
	{ 0x1a80, 0x1a89 },
	{ 0x1a90, 0x1a99 },
	{ 0x1b50, 0x1b59 },
	{ 0x1bb0, 0x1bb9 },
	{ 0x1c40, 0x1c49 },
	{ 0x1c50, 0x1c59 }, // Ol Chiki
	{ 0xa620, 0xa629 },
	{ 0xa8d0, 0xa8d9 },
	{ 0xa900, 0xa909 },
	{ 0xa9d0, 0xa9d9 },
	{ 0xa9f0, 0xa9f9 },
	{ 0xaa50, 0xaa59 },
	{ 0xabf0, 0xabf9 },
	{ 0xff10, 0xff19 },
	{ 0x104a0, 0x104a9 }, // Osmanya
	{ 0x10d30, 0x10d39 },
	{ 0x11066, 0x1106f },
	{ 0x110f0, 0x110f9 },
	{ 0x11136, 0x1113f },
	{ 0x111d0, 0x111d9 },
	{ 0x112f0, 0x112f9 },
	{ 0x11450, 0x11459 },
	{ 0x114d0, 0x114d9 },
	{ 0x11650, 0x11659 },
	{ 0x116c0, 0x116c9 },
	{ 0x11730, 0x11739 },
	{ 0x118e0, 0x118e9 },
	{ 0x11950, 0x11959 },
	{ 0x11c50, 0x11c59 },
	{ 0x11d50, 0x11d59 },
	{ 0x11da0, 0x11da9 },
	{ 0x16a60, 0x16a69 },
	{ 0x16b50, 0x16b59 },
	{ 0x1d7ce, 0x1d7ff },
	{ 0x1e140, 0x1e149 },
	{ 0x1e2f0, 0x1e2f9 },
	{ 0x1e950, 0x1e959 },
	{ 0x1fbf0, 0x1fbf9 }
};

static constexpr const utf_range letter_numbers[] = { //  Nl
	{ 0x16ee, 0x16f0 },
	{ 0x2160, 0x2182 },
	{ 0x2185, 0x2188 },
	{ 0x3007, 0x3007 },
	{ 0x3021, 0x3029 },
	{ 0x3038, 0x303a },
	{ 0xa6e6, 0xa6ef },
	{ 0x10140, 0x10174 }, // Ancient Greek Numbers
	{ 0x10341, 0x10341 }, // Gothic
	{ 0x1034a, 0x1034a },
	{ 0x103d1, 0x103d5 },
	{ 0x12400, 0x1246e } // Cuneiform Numbers and Punctuation
};

static constexpr const utf_range other_numbers[] = { //  No
	{ 0xb2, 0xb3 },
	{ 0xb9, 0xb9 },
	{ 0xbc, 0xbe },
	{ 0x9f4, 0x9f9 },
	{ 0xb72, 0xb77 },
	{ 0xbf0, 0xbf2 },
	{ 0xc78, 0xc7e },
	{ 0xd58, 0xd5e },
	{ 0xd70, 0xd78 },
	{ 0xf2a, 0xf33 },
	{ 0x1369, 0x137c },
	{ 0x17f0, 0x17f9 },
	{ 0x19da, 0x19da },
	{ 0x2070, 0x2070 }, // Superscripts and Subscripts
	{ 0x2074, 0x2079 },
	{ 0x2080, 0x2089 },
	{ 0x2150, 0x215f }, // Number Forms
	{ 0x2189, 0x2189 },
	{ 0x2460, 0x249b }, // Enclosed Alphanumerics
	{ 0x24ea, 0x24ff },
	{ 0x2776, 0x2793 },
	{ 0x2cfd, 0x2cfd },
	{ 0x3192, 0x3195 },
	{ 0x3220, 0x3229 },
	{ 0x3248, 0x324f },
	{ 0x3251, 0x325f },
	{ 0x3280, 0x3289 },
	{ 0x32b1, 0x32bf },
	{ 0xa830, 0xa835 },
	{ 0x10107, 0x10133 },
	{ 0x10175, 0x10178 },
	{ 0x1018a, 0x1018b },
	{ 0x102e1, 0x102fb },
	{ 0x10320, 0x10323 },
	{ 0x10858, 0x1085f },
	{ 0x10879, 0x1087f },
	{ 0x108a7, 0x108af },
	{ 0x108fb, 0x108ff },
	{ 0x10916, 0x1091b },
	{ 0x109bc, 0x109bd }, // Meroitic Cursive
	{ 0x109c0, 0x109cf },
	{ 0x109d2, 0x109ff },
	{ 0x10a40, 0x10a48 },
	{ 0x10a7d, 0x10a7e },
	{ 0x10a9d, 0x10a9f },
	{ 0x10aeb, 0x10aef },
	{ 0x10b58, 0x10b5f },
	{ 0x10b78, 0x10b7f },
	{ 0x10ba9, 0x10baf },
	{ 0x10cfa, 0x10cff },
	{ 0x10e60, 0x10e7e }, // Rumi Numeral Symbols
	{ 0x10f1d, 0x10f26 },
	{ 0x10f51, 0x10f54 },
	{ 0x10fc5, 0x10fcb },
	{ 0x11052, 0x11065 },
	{ 0x111e1, 0x111f4 }, // Sinhala Archaic Numbers
	{ 0x1173a, 0x1173b },
	{ 0x118ea, 0x118f2 },
	{ 0x11c5a, 0x11c6c },
	{ 0x11fc0, 0x11fd4 }, // Tamil Supplement
	{ 0x16b5b, 0x16b61 },
	{ 0x16e80, 0x16e96 },
	{ 0x1d2e0, 0x1d2f3 }, // Mayan Numerals
	{ 0x1d360, 0x1d378 }, // Counting Rod Numerals
	{ 0x1e8c7, 0x1e8cf },
	{ 0x1ec71, 0x1ecab }, // Indic Siyaq Numbers
	{ 0x1ecad, 0x1ecaf },
	{ 0x1ecb1, 0x1ecb4 },
	{ 0x1ed01, 0x1ed2d }, // Ottoman Siyaq Numbers
	{ 0x1ed2f, 0x1ed3d },
	{ 0x1f100, 0x1f10c } // Enclosed Alphanumeric Supplement
};

static constexpr const utf_range punctuation_connectors[] = { //  Pc
	{ 0x5f, 0x5f },
	{ 0x203f, 0x2040 },
	{ 0x2054, 0x2054 },
	{ 0xfe33, 0xfe34 },
	{ 0xfe4d, 0xfe4f },
	{ 0xff3f, 0xff3f }
};

static constexpr const utf_range dashes[] = { //  Pd
	{ 0x2d, 0x2d },
	{ 0x58a, 0x58a },
	{ 0x5be, 0x5be },
	{ 0x1400, 0x1400 }, // Unified Canadian Aboriginal Syllabics
	{ 0x1806, 0x1806 },
	{ 0x2010, 0x2015 },
	{ 0x2e17, 0x2e17 },
	{ 0x2e1a, 0x2e1a },
	{ 0x2e3a, 0x2e3b },
	{ 0x2e40, 0x2e40 },
	{ 0x301c, 0x301c },
	{ 0x3030, 0x3030 },
	{ 0x30a0, 0x30a0 }, // Katakana
	{ 0xfe31, 0xfe32 },
	{ 0xfe58, 0xfe58 },
	{ 0xfe63, 0xfe63 },
	{ 0xff0d, 0xff0d },
	{ 0x10ead, 0x10ead }
};

static constexpr const utf_range punctuation_closes[] = { //  Pe
	{ 0x29, 0x29 },
	{ 0x5d, 0x5d },
	{ 0x7d, 0x7d },
	{ 0xf3b | ODD_BIT, 0xf3d | ODD_BIT },
	{ 0x169c, 0x169c },
	{ 0x2046, 0x2046 },
	{ 0x207e, 0x207e },
	{ 0x208e, 0x208e },
	{ 0x2309 | ODD_BIT, 0x230b | ODD_BIT },
	{ 0x232a, 0x232a },
	{ 0x2769 | ODD_BIT, 0x2775 | ODD_BIT },
	{ 0x27c6, 0x27c6 },
	{ 0x27e7 | ODD_BIT, 0x27ef | ODD_BIT },
	{ 0x2984 | EVEN_BIT, 0x2998 | EVEN_BIT },
	{ 0x29d9 | ODD_BIT, 0x29db | ODD_BIT },
	{ 0x29fd, 0x29fd },
	{ 0x2e23 | ODD_BIT, 0x2e29 | ODD_BIT },
	{ 0x3009 | ODD_BIT, 0x3011 | ODD_BIT },
	{ 0x3015 | ODD_BIT, 0x301b | ODD_BIT },
	{ 0x301e, 0x301f },
	{ 0xfd3e, 0xfd3e },
	{ 0xfe18, 0xfe18 },
	{ 0xfe36 | EVEN_BIT, 0xfe44 | EVEN_BIT },
	{ 0xfe48, 0xfe48 },
	{ 0xfe5a | EVEN_BIT, 0xfe5e | EVEN_BIT },
	{ 0xff09, 0xff09 },
	{ 0xff3d, 0xff3d },
	{ 0xff5d, 0xff5d },
	{ 0xff60, 0xff60 },
	{ 0xff63, 0xff63 }
};

static constexpr const utf_range final_quotes[] = { //  Pf
	{ 0xbb, 0xbb },
	{ 0x2019, 0x2019 },
	{ 0x201d, 0x201d },
	{ 0x203a, 0x203a },
	{ 0x2e03 | ODD_BIT, 0x2e05 | ODD_BIT },
	{ 0x2e0a, 0x2e0a },
	{ 0x2e0d, 0x2e0d },
	{ 0x2e1d, 0x2e1d },
	{ 0x2e21, 0x2e21 }
};

static constexpr const utf_range initial_quotes[] = { //  Pi
	{ 0xab, 0xab },
	{ 0x2018, 0x2018 },
	{ 0x201b, 0x201c },
	{ 0x201f, 0x201f },
	{ 0x2039, 0x2039 },
	{ 0x2e02 | EVEN_BIT, 0x2e04 | EVEN_BIT },
	{ 0x2e09, 0x2e09 },
	{ 0x2e0c, 0x2e0c },
	{ 0x2e1c, 0x2e1c },
	{ 0x2e20, 0x2e20 }
};

static constexpr const utf_range other_punctuation[] = { //  Po
	{ 0x21, 0x23 },
	{ 0x25, 0x27 },
	{ 0x2a | EVEN_BIT, 0x2c | EVEN_BIT },
	{ 0x2e, 0x2f },
	{ 0x3a, 0x3b },
	{ 0x3f, 0x40 },
	{ 0x5c, 0x5c },
	{ 0xa1, 0xa1 },
	{ 0xa7, 0xa7 },
	{ 0xb6, 0xb7 },
	{ 0xbf, 0xbf },
	{ 0x37e, 0x37e },
	{ 0x387, 0x387 },
	{ 0x55a, 0x55f },
	{ 0x589, 0x589 },
	{ 0x5c0, 0x5c0 },
	{ 0x5c3, 0x5c3 },
	{ 0x5c6, 0x5c6 },
	{ 0x5f3, 0x5f4 },
	{ 0x609, 0x60a },
	{ 0x60c, 0x60d },
	{ 0x61b, 0x61b },
	{ 0x61e, 0x61f },
	{ 0x66a, 0x66d },
	{ 0x6d4, 0x6d4 },
	{ 0x700, 0x70d }, // Syriac
	{ 0x7f7, 0x7f9 },
	{ 0x830, 0x83e },
	{ 0x85e, 0x85e },
	{ 0x964, 0x965 },
	{ 0x970, 0x970 },
	{ 0x9fd, 0x9fd },
	{ 0xa76, 0xa76 },
	{ 0xaf0, 0xaf0 },
	{ 0xc77, 0xc77 },
	{ 0xc84, 0xc84 },
	{ 0xdf4, 0xdf4 },
	{ 0xe4f, 0xe4f },
	{ 0xe5a, 0xe5b },
	{ 0xf04, 0xf12 },
	{ 0xf14, 0xf14 },
	{ 0xf85, 0xf85 },
	{ 0xfd0, 0xfd4 },
	{ 0xfd9, 0xfda },
	{ 0x104a, 0x104f },
	{ 0x10fb, 0x10fb },
	{ 0x1360, 0x1368 },
	{ 0x166e, 0x166e },
	{ 0x16eb, 0x16ed },
	{ 0x1735, 0x1736 },
	{ 0x17d4, 0x17d6 },
	{ 0x17d8, 0x17da },
	{ 0x1800, 0x1805 }, // Mongolian
	{ 0x1807, 0x180a },
	{ 0x1944, 0x1945 },
	{ 0x1a1e, 0x1a1f },
	{ 0x1aa0, 0x1aa6 },
	{ 0x1aa8, 0x1aad },
	{ 0x1b5a, 0x1b60 },
	{ 0x1bfc, 0x1bff },
	{ 0x1c3b, 0x1c3f },
	{ 0x1c7e, 0x1c7f },
	{ 0x1cc0, 0x1cc7 }, // Sundanese Supplement
	{ 0x1cd3, 0x1cd3 },
	{ 0x2016, 0x2017 },
	{ 0x2020, 0x2027 },
	{ 0x2030, 0x2038 },
	{ 0x203b, 0x203e },
	{ 0x2041, 0x2043 },
	{ 0x2047, 0x2051 },
	{ 0x2053, 0x2053 },
	{ 0x2055, 0x205e },
	{ 0x2cf9, 0x2cfc },
	{ 0x2cfe, 0x2cff },
	{ 0x2d70, 0x2d70 },
	{ 0x2e00, 0x2e01 }, // Supplemental Punctuation
	{ 0x2e06, 0x2e08 },
	{ 0x2e0b, 0x2e0b },
	{ 0x2e0e, 0x2e16 },
	{ 0x2e18, 0x2e19 },
	{ 0x2e1b, 0x2e1b },
	{ 0x2e1e, 0x2e1f },
	{ 0x2e2a, 0x2e2e },
	{ 0x2e30, 0x2e39 },
	{ 0x2e3c, 0x2e3f },
	{ 0x2e41, 0x2e41 },
	{ 0x2e43, 0x2e4f },
	{ 0x2e52, 0x2e52 },
	{ 0x3001, 0x3003 },
	{ 0x303d, 0x303d },
	{ 0x30fb, 0x30fb },
	{ 0xa4fe, 0xa4ff },
	{ 0xa60d, 0xa60f },
	{ 0xa673, 0xa673 },
	{ 0xa67e, 0xa67e },
	{ 0xa6f2, 0xa6f7 },
	{ 0xa874, 0xa877 },
	{ 0xa8ce, 0xa8cf },
	{ 0xa8f8, 0xa8fa },
	{ 0xa8fc, 0xa8fc },
	{ 0xa92e, 0xa92f },
	{ 0xa95f, 0xa95f },
	{ 0xa9c1, 0xa9cd },
	{ 0xa9de, 0xa9df },
	{ 0xaa5c, 0xaa5f },
	{ 0xaade, 0xaadf },
	{ 0xaaf0, 0xaaf1 },
	{ 0xabeb, 0xabeb },
	{ 0xfe10, 0xfe16 },
	{ 0xfe19, 0xfe19 },
	{ 0xfe30, 0xfe30 },
	{ 0xfe45, 0xfe46 },
	{ 0xfe49, 0xfe4c },
	{ 0xfe50, 0xfe52 },
	{ 0xfe54, 0xfe57 },
	{ 0xfe5f, 0xfe61 },
	{ 0xfe68, 0xfe68 },
	{ 0xfe6a, 0xfe6b },
	{ 0xff01, 0xff03 },
	{ 0xff05, 0xff07 },
	{ 0xff0a | EVEN_BIT, 0xff0c | EVEN_BIT },
	{ 0xff0e, 0xff0f },
	{ 0xff1a, 0xff1b },
	{ 0xff1f, 0xff20 },
	{ 0xff3c, 0xff3c },
	{ 0xff61, 0xff61 },
	{ 0xff64, 0xff65 },
	{ 0x10100, 0x10102 }, // Aegean Numbers
	{ 0x1039f, 0x1039f },
	{ 0x103d0, 0x103d0 },
	{ 0x1056f, 0x1056f },
	{ 0x10857, 0x10857 }, // Imperial Aramaic
	{ 0x1091f, 0x1091f },
	{ 0x1093f, 0x1093f },
	{ 0x10a50, 0x10a58 },
	{ 0x10a7f, 0x10a7f },
	{ 0x10af0, 0x10af6 },
	{ 0x10b39, 0x10b3f },
	{ 0x10b99, 0x10b9c },
	{ 0x10f55, 0x10f59 },
	{ 0x11047, 0x1104d },
	{ 0x110bb, 0x110bc },
	{ 0x110be, 0x110c1 },
	{ 0x11140, 0x11143 },
	{ 0x11174, 0x11175 },
	{ 0x111c5, 0x111c8 },
	{ 0x111cd, 0x111cd },
	{ 0x111db, 0x111db },
	{ 0x111dd, 0x111df },
	{ 0x11238, 0x1123d },
	{ 0x112a9, 0x112a9 },
	{ 0x1144b, 0x1144f },
	{ 0x1145a, 0x1145b },
	{ 0x1145d, 0x1145d },
	{ 0x114c6, 0x114c6 },
	{ 0x115c1, 0x115d7 },
	{ 0x11641, 0x11643 },
	{ 0x11660, 0x1166c }, // Mongolian Supplement
	{ 0x1173c, 0x1173e },
	{ 0x1183b, 0x1183b },
	{ 0x11944, 0x11946 },
	{ 0x119e2, 0x119e2 },
	{ 0x11a3f, 0x11a46 },
	{ 0x11a9a, 0x11a9c },
	{ 0x11a9e, 0x11aa2 },
	{ 0x11c41, 0x11c45 },
	{ 0x11c70, 0x11c71 }, // Marchen
	{ 0x11ef7, 0x11ef8 },
	{ 0x11fff, 0x11fff },
	{ 0x12470, 0x12474 },
	{ 0x16a6e, 0x16a6f },
	{ 0x16af5, 0x16af5 },
	{ 0x16b37, 0x16b3b },
	{ 0x16b44, 0x16b44 },
	{ 0x16e97, 0x16e9a },
	{ 0x16fe2, 0x16fe2 },
	{ 0x1bc9f, 0x1bc9f },
	{ 0x1da87, 0x1da8b },
	{ 0x1e95e, 0x1e95f }
};

static constexpr const utf_range punctuation_opens[] = { //  Ps
	{ 0x28, 0x28 },
	{ 0x5b, 0x5b },
	{ 0x7b, 0x7b },
	{ 0xf3a | EVEN_BIT, 0xf3c | EVEN_BIT },
	{ 0x169b, 0x169b },
	{ 0x201a, 0x201a },
	{ 0x201e, 0x201e },
	{ 0x2045, 0x2045 },
	{ 0x207d, 0x207d },
	{ 0x208d, 0x208d },
	{ 0x2308 | EVEN_BIT, 0x230a | EVEN_BIT },
	{ 0x2329, 0x2329 },
	{ 0x2768 | EVEN_BIT, 0x2774 | EVEN_BIT }, // Dingbats
	{ 0x27c5, 0x27c5 },
	{ 0x27e6 | EVEN_BIT, 0x27ee | EVEN_BIT },
	{ 0x2983 | ODD_BIT, 0x2997 | ODD_BIT }, // Miscellaneous Mathematical Symbols-B
	{ 0x29d8 | EVEN_BIT, 0x29da | EVEN_BIT },
	{ 0x29fc, 0x29fc },
	{ 0x2e22 | EVEN_BIT, 0x2e28 | EVEN_BIT },
	{ 0x2e42, 0x2e42 },
	{ 0x3008 | EVEN_BIT, 0x3010 | EVEN_BIT },
	{ 0x3014 | EVEN_BIT, 0x301a | EVEN_BIT },
	{ 0x301d, 0x301d },
	{ 0xfd3f, 0xfd3f },
	{ 0xfe17, 0xfe17 },
	{ 0xfe35 | ODD_BIT, 0xfe43 | ODD_BIT },
	{ 0xfe47, 0xfe47 },
	{ 0xfe59 | ODD_BIT, 0xfe5d | ODD_BIT },
	{ 0xff08, 0xff08 },
	{ 0xff3b, 0xff3b },
	{ 0xff5b, 0xff5b },
	{ 0xff5f, 0xff5f },
	{ 0xff62, 0xff62 }
};

static constexpr const utf_range currency_symbols[] = { //  Sc
	{ 0x24, 0x24 },
	{ 0xa2, 0xa5 },
	{ 0x58f, 0x58f },
	{ 0x60b, 0x60b },
	{ 0x7fe, 0x7ff },
	{ 0x9f2, 0x9f3 },
	{ 0x9fb, 0x9fb },
	{ 0xaf1, 0xaf1 },
	{ 0xbf9, 0xbf9 },
	{ 0xe3f, 0xe3f },
	{ 0x17db, 0x17db },
	{ 0x20a0, 0x20bf }, // Currency Symbols
	{ 0xa838, 0xa838 },
	{ 0xfdfc, 0xfdfc },
	{ 0xfe69, 0xfe69 },
	{ 0xff04, 0xff04 },
	{ 0xffe0, 0xffe1 },
	{ 0xffe5, 0xffe6 },
	{ 0x11fdd, 0x11fe0 },
	{ 0x1e2ff, 0x1e2ff },
	{ 0x1ecb0, 0x1ecb0 }
};

static constexpr const utf_range modifier_symbols[] = { //  Sk
	{ 0x5e | EVEN_BIT, 0x60 | EVEN_BIT },
	{ 0xa8, 0xa8 },
	{ 0xaf, 0xaf },
	{ 0xb4, 0xb4 },
	{ 0xb8, 0xb8 },
	{ 0x2c2, 0x2c5 },
	{ 0x2d2, 0x2df },
	{ 0x2e5, 0x2eb },
	{ 0x2ed, 0x2ed },
	{ 0x2ef, 0x2ff },
	{ 0x375, 0x375 },
	{ 0x384, 0x385 },
	{ 0x1fbd, 0x1fbd },
	{ 0x1fbf, 0x1fc1 },
	{ 0x1fcd, 0x1fcf },
	{ 0x1fdd, 0x1fdf },
	{ 0x1fed, 0x1fef },
	{ 0x1ffd, 0x1ffe },
	{ 0x309b, 0x309c },
	{ 0xa700, 0xa716 },
	{ 0xa720, 0xa721 },
	{ 0xa789, 0xa78a },
	{ 0xab5b, 0xab5b },
	{ 0xab6a, 0xab6b },
	{ 0xfbb2, 0xfbc1 },
	{ 0xff3e | EVEN_BIT, 0xff40 | EVEN_BIT },
	{ 0xffe3, 0xffe3 },
	{ 0x1f3fb, 0x1f3ff }
};

static constexpr const utf_range math_symbols[] = { //  Sm
	{ 0x2b, 0x2b },
	{ 0x3c, 0x3e },
	{ 0x7c | EVEN_BIT, 0x7e | EVEN_BIT },
	{ 0xac, 0xac },
	{ 0xb1, 0xb1 },
	{ 0xd7, 0xd7 },
	{ 0xf7, 0xf7 },
	{ 0x3f6, 0x3f6 },
	{ 0x606, 0x608 },
	{ 0x2044, 0x2044 },
	{ 0x2052, 0x2052 },
	{ 0x207a, 0x207c },
	{ 0x208a, 0x208c },
	{ 0x2118, 0x2118 },
	{ 0x2140, 0x2144 },
	{ 0x214b, 0x214b },
	{ 0x2190, 0x2194 }, // Arrows
	{ 0x219a, 0x219b },
	{ 0x21a0, 0x21a0 },
	{ 0x21a3, 0x21a3 },
	{ 0x21a6, 0x21a6 },
	{ 0x21ae, 0x21ae },
	{ 0x21ce, 0x21cf },
	{ 0x21d2 | EVEN_BIT, 0x21d4 | EVEN_BIT },
	{ 0x21f4, 0x22ff },
	{ 0x2320, 0x2321 },
	{ 0x237c, 0x237c },
	{ 0x239b, 0x23b3 },
	{ 0x23dc, 0x23e1 },
	{ 0x25b7, 0x25b7 }, // Geometric Shapes
	{ 0x25c1, 0x25c1 },
	{ 0x25f8, 0x25ff },
	{ 0x266f, 0x266f },
	{ 0x27c0, 0x27c4 }, // Miscellaneous Mathematical Symbols-A
	{ 0x27c7, 0x27e5 },
	{ 0x27f0, 0x27ff }, // Supplemental Arrows-A
	{ 0x2900, 0x2982 }, // Supplemental Arrows-B
	{ 0x2999, 0x29d7 },
	{ 0x29dc, 0x29fb },
	{ 0x29fe, 0x2aff },
	{ 0x2b30, 0x2b44 },
	{ 0x2b47, 0x2b4c },
	{ 0xfb29, 0xfb29 },
	{ 0xfe62, 0xfe62 },
	{ 0xfe64, 0xfe66 },
	{ 0xff0b, 0xff0b },
	{ 0xff1c, 0xff1e },
	{ 0xff5c | EVEN_BIT, 0xff5e | EVEN_BIT },
	{ 0xffe2, 0xffe2 },
	{ 0xffe9, 0xffec },
	{ 0x1d6c1, 0x1d6c1 },
	{ 0x1d6db, 0x1d6db },
	{ 0x1d6fb, 0x1d6fb },
	{ 0x1d715, 0x1d715 },
	{ 0x1d735, 0x1d735 },
	{ 0x1d74f, 0x1d74f },
	{ 0x1d76f, 0x1d76f },
	{ 0x1d789, 0x1d789 },
	{ 0x1d7a9, 0x1d7a9 },
	{ 0x1d7c3, 0x1d7c3 },
	{ 0x1eef0, 0x1eef1 }
};

static constexpr const utf_range other_symbols[] = { //  So
	{ 0xa6, 0xa6 },
	{ 0xa9, 0xa9 },
	{ 0xae | EVEN_BIT, 0xb0 | EVEN_BIT },
	{ 0x482, 0x482 },
	{ 0x58d, 0x58e },
	{ 0x60e, 0x60f },
	{ 0x6de, 0x6de },
	{ 0x6e9, 0x6e9 },
	{ 0x6fd, 0x6fe },
	{ 0x7f6, 0x7f6 },
	{ 0x9fa, 0x9fa },
	{ 0xb70, 0xb70 },
	{ 0xbf3, 0xbf8 },
	{ 0xbfa, 0xbfa },
	{ 0xc7f, 0xc7f },
	{ 0xd4f, 0xd4f },
	{ 0xd79, 0xd79 },
	{ 0xf01, 0xf03 },
	{ 0xf13, 0xf13 },
	{ 0xf15, 0xf17 },
	{ 0xf1a, 0xf1f },
	{ 0xf34 | EVEN_BIT, 0xf38 | EVEN_BIT },
	{ 0xfbe, 0xfc5 },
	{ 0xfc7, 0xfcc },
	{ 0xfce, 0xfcf },
	{ 0xfd5, 0xfd8 },
	{ 0x109e, 0x109f },
	{ 0x1390, 0x1399 },
	{ 0x166d, 0x166d },
	{ 0x1940, 0x1940 },
	{ 0x19de, 0x19ff },
	{ 0x1b61, 0x1b6a },
	{ 0x1b74, 0x1b7c },
	{ 0x2100, 0x2101 }, // Letterlike Symbols
	{ 0x2103, 0x2106 },
	{ 0x2108, 0x2109 },
	{ 0x2114, 0x2114 },
	{ 0x2116, 0x2117 },
	{ 0x211e, 0x2123 },
	{ 0x2125 | ODD_BIT, 0x2129 | ODD_BIT },
	{ 0x212e, 0x212e },
	{ 0x213a, 0x213b },
	{ 0x214a, 0x214a },
	{ 0x214c, 0x214d },
	{ 0x214f, 0x214f },
	{ 0x218a, 0x218b },
	{ 0x2195, 0x2199 },
	{ 0x219c, 0x219f },
	{ 0x21a1, 0x21a2 },
	{ 0x21a4, 0x21a5 },
	{ 0x21a7, 0x21ad },
	{ 0x21af, 0x21cd },
	{ 0x21d0, 0x21d1 },
	{ 0x21d3, 0x21d3 },
	{ 0x21d5, 0x21f3 },
	{ 0x2300, 0x2307 }, // Miscellaneous Technical
	{ 0x230c, 0x231f },
	{ 0x2322, 0x2328 },
	{ 0x232b, 0x237b },
	{ 0x237d, 0x239a },
	{ 0x23b4, 0x23db },
	{ 0x23e2, 0x2426 },
	{ 0x2440, 0x244a }, // Optical Character Recognition
	{ 0x249c, 0x24e9 },
	{ 0x2500, 0x25b6 }, // Box Drawing
	{ 0x25b8, 0x25c0 },
	{ 0x25c2, 0x25f7 },
	{ 0x2600, 0x266e }, // Miscellaneous Symbols
	{ 0x2670, 0x2767 },
	{ 0x2794, 0x27bf },
	{ 0x2800, 0x28ff }, // Braille Patterns
	{ 0x2b00, 0x2b2f }, // Miscellaneous Symbols and Arrows
	{ 0x2b45, 0x2b46 },
	{ 0x2b4d, 0x2b73 },
	{ 0x2b76, 0x2b95 },
	{ 0x2b97, 0x2bff },
	{ 0x2ce5, 0x2cea },
	{ 0x2e50, 0x2e51 },
	{ 0x2e80, 0x2e99 }, // CJK Radicals Supplement
	{ 0x2e9b, 0x2ef3 },
	{ 0x2f00, 0x2fd5 }, // Kangxi Radicals
	{ 0x2ff0, 0x2ffb }, // Ideographic Description Characters
	{ 0x3004, 0x3004 },
	{ 0x3012, 0x3013 },
	{ 0x3020, 0x3020 },
	{ 0x3036, 0x3037 },
	{ 0x303e, 0x303f },
	{ 0x3190, 0x3191 }, // Kanbun
	{ 0x3196, 0x319f },
	{ 0x31c0, 0x31e3 }, // CJK Strokes
	{ 0x3200, 0x321e }, // Enclosed CJK Letters and Months
	{ 0x322a, 0x3247 },
	{ 0x3250, 0x3250 },
	{ 0x3260, 0x327f },
	{ 0x328a, 0x32b0 },
	{ 0x32c0, 0x33ff },
	{ 0x4dc0, 0x4dff }, // Yijing Hexagram Symbols
	{ 0xa490, 0xa4c6 },
	{ 0xa828, 0xa82b },
	{ 0xa836, 0xa837 },
	{ 0xa839, 0xa839 },
	{ 0xaa77, 0xaa79 },
	{ 0xfdfd, 0xfdfd },
	{ 0xffe4, 0xffe4 },
	{ 0xffe8, 0xffe8 },
	{ 0xffed, 0xffee },
	{ 0xfffc, 0xfffd },
	{ 0x10137, 0x1013f },
	{ 0x10179, 0x10189 },
	{ 0x1018c, 0x1018e },
	{ 0x10190, 0x1019c }, // Ancient Symbols
	{ 0x101a0, 0x101a0 },
	{ 0x101d0, 0x101fc }, // Phaistos Disc
	{ 0x10877, 0x10878 },
	{ 0x10ac8, 0x10ac8 },
	{ 0x1173f, 0x1173f },
	{ 0x11fd5, 0x11fdc },
	{ 0x11fe1, 0x11ff1 },
	{ 0x16b3c, 0x16b3f },
	{ 0x16b45, 0x16b45 },
	{ 0x1bc9c, 0x1bc9c },
	{ 0x1d000, 0x1d0f5 }, // Byzantine Musical Symbols
	{ 0x1d100, 0x1d126 }, // Musical Symbols
	{ 0x1d129, 0x1d164 },
	{ 0x1d16a, 0x1d16c },
	{ 0x1d183, 0x1d184 },
	{ 0x1d18c, 0x1d1a9 },
	{ 0x1d1ae, 0x1d1e8 },
	{ 0x1d200, 0x1d241 }, // Ancient Greek Musical Notation
	{ 0x1d245, 0x1d245 },
	{ 0x1d300, 0x1d356 }, // Tai Xuan Jing Symbols
	{ 0x1d800, 0x1d9ff }, // Sutton SignWriting
	{ 0x1da37, 0x1da3a },
	{ 0x1da6d, 0x1da74 },
	{ 0x1da76, 0x1da83 },
	{ 0x1da85, 0x1da86 },
	{ 0x1e14f, 0x1e14f },
	{ 0x1ecac, 0x1ecac },
	{ 0x1ed2e, 0x1ed2e },
	{ 0x1f000, 0x1f02b }, // Mahjong Tiles
	{ 0x1f030, 0x1f093 }, // Domino Tiles
	{ 0x1f0a0, 0x1f0ae }, // Playing Cards
	{ 0x1f0b1, 0x1f0bf },
	{ 0x1f0c1, 0x1f0cf },
	{ 0x1f0d1, 0x1f0f5 },
	{ 0x1f10d, 0x1f1ad },
	{ 0x1f1e6, 0x1f202 },
	{ 0x1f210, 0x1f23b }, // Enclosed Ideographic Supplement
	{ 0x1f240, 0x1f248 },
	{ 0x1f250, 0x1f251 },
	{ 0x1f260, 0x1f265 },
	{ 0x1f300, 0x1f3fa }, // Miscellaneous Symbols and Pictographs
	{ 0x1f400, 0x1f6d7 },
	{ 0x1f6e0, 0x1f6ec }, // Transport and Map Symbols
	{ 0x1f6f0, 0x1f6fc },
	{ 0x1f700, 0x1f773 }, // Alchemical Symbols
	{ 0x1f780, 0x1f7d8 }, // Geometric Shapes Extended
	{ 0x1f7e0, 0x1f7eb },
	{ 0x1f800, 0x1f80b }, // Supplemental Arrows-C
	{ 0x1f810, 0x1f847 },
	{ 0x1f850, 0x1f859 },
	{ 0x1f860, 0x1f887 },
	{ 0x1f890, 0x1f8ad },
	{ 0x1f8b0, 0x1f8b1 },
	{ 0x1f900, 0x1f978 }, // Supplemental Symbols and Pictographs
	{ 0x1f97a, 0x1f9cb },
	{ 0x1f9cd, 0x1fa53 },
	{ 0x1fa60, 0x1fa6d }, // Chess Symbols
	{ 0x1fa70, 0x1fa74 }, // Symbols and Pictographs Extended-A
	{ 0x1fa78, 0x1fa7a },
	{ 0x1fa80, 0x1fa86 },
	{ 0x1fa90, 0x1faa8 },
	{ 0x1fab0, 0x1fab6 },
	{ 0x1fac0, 0x1fac2 },
	{ 0x1fad0, 0x1fad6 },
	{ 0x1fb00, 0x1fb92 }, // Symbols for Legacy Computing
	{ 0x1fb94, 0x1fbca }
};

static constexpr const utf_range line_separators[] = { //  Zl
	{ 0x2028, 0x2028 }
};

static constexpr const utf_range paragraph_separators[] = { //  Zp
	{ 0x2029, 0x2029 }
};

static constexpr const utf_range spaces[] = { //  Zs
	{ 0x20, 0x20 },
	{ 0xa0, 0xa0 }, // Latin-1 Supplement
	{ 0x1680, 0x1680 }, // Ogham
	{ 0x2000, 0x200a }, // General Punctuation
	{ 0x202f, 0x202f },
	{ 0x205f, 0x205f },
	{ 0x3000, 0x3000 } // CJK Symbols and Punctuation
};

static constexpr const utf_range other_chars[] = { //  C
	{ 0x0, 0x1f },
	{ 0x7f, 0x9f },
	{ 0xad, 0xad },
	{ 0x600, 0x605 },
	{ 0x61c, 0x61c },
	{ 0x6dd, 0x6dd },
	{ 0x70f, 0x70f },
	{ 0x8e2, 0x8e2 },
	{ 0x180e, 0x180e },
	{ 0x200b, 0x200f },
	{ 0x202a, 0x202e },
	{ 0x2060, 0x2064 },
	{ 0x2066, 0x206f },
	{ 0xd800, 0xd800 },
	{ 0xdb7f, 0xdb80 },
	{ 0xdbff, 0xdc00 },
	{ 0xdfff, 0xe000 },
	{ 0xf8ff, 0xf8ff },
	{ 0xfeff, 0xfeff },
	{ 0xfff9, 0xfffb },
	{ 0x110bd, 0x110bd },
	{ 0x110cd, 0x110cd },
	{ 0x13430, 0x13438 },
	{ 0x1bca0, 0x1bca3 },
	{ 0x1d173, 0x1d17a },
	{ 0xe0001, 0xe0001 },
	{ 0xe0020, 0xe007f },
	{ 0xf0000, 0xf0000 },
	{ 0xffffd, 0xffffd },
	{ 0x100000, 0x100000 },
	{ 0x10fffd, 0x10fffd }
};

static constexpr const utf_range letters[] = { //  L
	{ 0x41, 0x5a },
	{ 0x61, 0x7a },
	{ 0xaa, 0xaa },
	{ 0xb5, 0xb5 },
	{ 0xba, 0xba },
	{ 0xc0, 0xd6 },
	{ 0xd8, 0xf6 },
	{ 0xf8, 0x2c1 },
	{ 0x2c6, 0x2d1 },
	{ 0x2e0, 0x2e4 },
	{ 0x2ec | EVEN_BIT, 0x2ee | EVEN_BIT },
	{ 0x370, 0x374 },
	{ 0x376, 0x377 },
	{ 0x37a, 0x37d },
	{ 0x37f, 0x37f },
	{ 0x386, 0x386 },
	{ 0x388, 0x38a },
	{ 0x38c, 0x38c },
	{ 0x38e, 0x3a1 },
	{ 0x3a3, 0x3f5 },
	{ 0x3f7, 0x481 },
	{ 0x48a, 0x52f },
	{ 0x531, 0x556 },
	{ 0x559, 0x559 },
	{ 0x560, 0x588 },
	{ 0x5d0, 0x5ea },
	{ 0x5ef, 0x5f2 },
	{ 0x620, 0x64a },
	{ 0x66e, 0x66f },
	{ 0x671, 0x6d3 },
	{ 0x6d5, 0x6d5 },
	{ 0x6e5, 0x6e6 },
	{ 0x6ee, 0x6ef },
	{ 0x6fa, 0x6fc },
	{ 0x6ff, 0x6ff },
	{ 0x710, 0x710 },
	{ 0x712, 0x72f },
	{ 0x74d, 0x7a5 },
	{ 0x7b1, 0x7b1 },
	{ 0x7ca, 0x7ea },
	{ 0x7f4, 0x7f5 },
	{ 0x7fa, 0x7fa },
	{ 0x800, 0x815 },
	{ 0x81a, 0x81a },
	{ 0x824, 0x824 },
	{ 0x828, 0x828 },
	{ 0x840, 0x858 },
	{ 0x860, 0x86a },
	{ 0x8a0, 0x8b4 },
	{ 0x8b6, 0x8c7 },
	{ 0x904, 0x939 },
	{ 0x93d, 0x93d },
	{ 0x950, 0x950 },
	{ 0x958, 0x961 },
	{ 0x971, 0x980 },
	{ 0x985, 0x98c },
	{ 0x98f, 0x990 },
	{ 0x993, 0x9a8 },
	{ 0x9aa, 0x9b0 },
	{ 0x9b2, 0x9b2 },
	{ 0x9b6, 0x9b9 },
	{ 0x9bd, 0x9bd },
	{ 0x9ce, 0x9ce },
	{ 0x9dc, 0x9dd },
	{ 0x9df, 0x9e1 },
	{ 0x9f0, 0x9f1 },
	{ 0x9fc, 0x9fc },
	{ 0xa05, 0xa0a },
	{ 0xa0f, 0xa10 },
	{ 0xa13, 0xa28 },
	{ 0xa2a, 0xa30 },
	{ 0xa32, 0xa33 },
	{ 0xa35, 0xa36 },
	{ 0xa38, 0xa39 },
	{ 0xa59, 0xa5c },
	{ 0xa5e, 0xa5e },
	{ 0xa72, 0xa74 },
	{ 0xa85, 0xa8d },
	{ 0xa8f, 0xa91 },
	{ 0xa93, 0xaa8 },
	{ 0xaaa, 0xab0 },
	{ 0xab2, 0xab3 },
	{ 0xab5, 0xab9 },
	{ 0xabd, 0xabd },
	{ 0xad0, 0xad0 },
	{ 0xae0, 0xae1 },
	{ 0xaf9, 0xaf9 },
	{ 0xb05, 0xb0c },
	{ 0xb0f, 0xb10 },
	{ 0xb13, 0xb28 },
	{ 0xb2a, 0xb30 },
	{ 0xb32, 0xb33 },
	{ 0xb35, 0xb39 },
	{ 0xb3d, 0xb3d },
	{ 0xb5c, 0xb5d },
	{ 0xb5f, 0xb61 },
	{ 0xb71, 0xb71 },
	{ 0xb83, 0xb83 },
	{ 0xb85, 0xb8a },
	{ 0xb8e, 0xb90 },
	{ 0xb92, 0xb95 },
	{ 0xb99, 0xb9a },
	{ 0xb9c, 0xb9c },
	{ 0xb9e, 0xb9f },
	{ 0xba3, 0xba4 },
	{ 0xba8, 0xbaa },
	{ 0xbae, 0xbb9 },
	{ 0xbd0, 0xbd0 },
	{ 0xc05, 0xc0c },
	{ 0xc0e, 0xc10 },
	{ 0xc12, 0xc28 },
	{ 0xc2a, 0xc39 },
	{ 0xc3d, 0xc3d },
	{ 0xc58, 0xc5a },
	{ 0xc60, 0xc61 },
	{ 0xc80, 0xc80 },
	{ 0xc85, 0xc8c },
	{ 0xc8e, 0xc90 },
	{ 0xc92, 0xca8 },
	{ 0xcaa, 0xcb3 },
	{ 0xcb5, 0xcb9 },
	{ 0xcbd, 0xcbd },
	{ 0xcde, 0xcde },
	{ 0xce0, 0xce1 },
	{ 0xcf1, 0xcf2 },
	{ 0xd04, 0xd0c },
	{ 0xd0e, 0xd10 },
	{ 0xd12, 0xd3a },
	{ 0xd3d, 0xd3d },
	{ 0xd4e, 0xd4e },
	{ 0xd54, 0xd56 },
	{ 0xd5f, 0xd61 },
	{ 0xd7a, 0xd7f },
	{ 0xd85, 0xd96 },
	{ 0xd9a, 0xdb1 },
	{ 0xdb3, 0xdbb },
	{ 0xdbd, 0xdbd },
	{ 0xdc0, 0xdc6 },
	{ 0xe01, 0xe30 },
	{ 0xe32, 0xe33 },
	{ 0xe40, 0xe46 },
	{ 0xe81, 0xe82 },
	{ 0xe84, 0xe84 },
	{ 0xe86, 0xe8a },
	{ 0xe8c, 0xea3 },
	{ 0xea5, 0xea5 },
	{ 0xea7, 0xeb0 },
	{ 0xeb2, 0xeb3 },
	{ 0xebd, 0xebd },
	{ 0xec0, 0xec4 },
	{ 0xec6, 0xec6 },
	{ 0xedc, 0xedf },
	{ 0xf00, 0xf00 },
	{ 0xf40, 0xf47 },
	{ 0xf49, 0xf6c },
	{ 0xf88, 0xf8c },
	{ 0x1000, 0x102a },
	{ 0x103f, 0x103f },
	{ 0x1050, 0x1055 },
	{ 0x105a, 0x105d },
	{ 0x1061, 0x1061 },
	{ 0x1065, 0x1066 },
	{ 0x106e, 0x1070 },
	{ 0x1075, 0x1081 },
	{ 0x108e, 0x108e },
	{ 0x10a0, 0x10c5 },
	{ 0x10c7, 0x10c7 },
	{ 0x10cd, 0x10cd },
	{ 0x10d0, 0x10fa },
	{ 0x10fc, 0x1248 },
	{ 0x124a, 0x124d },
	{ 0x1250, 0x1256 },
	{ 0x1258, 0x1258 },
	{ 0x125a, 0x125d },
	{ 0x1260, 0x1288 },
	{ 0x128a, 0x128d },
	{ 0x1290, 0x12b0 },
	{ 0x12b2, 0x12b5 },
	{ 0x12b8, 0x12be },
	{ 0x12c0, 0x12c0 },
	{ 0x12c2, 0x12c5 },
	{ 0x12c8, 0x12d6 },
	{ 0x12d8, 0x1310 },
	{ 0x1312, 0x1315 },
	{ 0x1318, 0x135a },
	{ 0x1380, 0x138f },
	{ 0x13a0, 0x13f5 },
	{ 0x13f8, 0x13fd },
	{ 0x1401, 0x166c },
	{ 0x166f, 0x167f },
	{ 0x1681, 0x169a },
	{ 0x16a0, 0x16ea },
	{ 0x16f1, 0x16f8 },
	{ 0x1700, 0x170c },
	{ 0x170e, 0x1711 },
	{ 0x1720, 0x1731 },
	{ 0x1740, 0x1751 },
	{ 0x1760, 0x176c },
	{ 0x176e, 0x1770 },
	{ 0x1780, 0x17b3 },
	{ 0x17d7, 0x17d7 },
	{ 0x17dc, 0x17dc },
	{ 0x1820, 0x1878 },
	{ 0x1880, 0x1884 },
	{ 0x1887, 0x18a8 },
	{ 0x18aa, 0x18aa },
	{ 0x18b0, 0x18f5 },
	{ 0x1900, 0x191e },
	{ 0x1950, 0x196d },
	{ 0x1970, 0x1974 },
	{ 0x1980, 0x19ab },
	{ 0x19b0, 0x19c9 },
	{ 0x1a00, 0x1a16 },
	{ 0x1a20, 0x1a54 },
	{ 0x1aa7, 0x1aa7 },
	{ 0x1b05, 0x1b33 },
	{ 0x1b45, 0x1b4b },
	{ 0x1b83, 0x1ba0 },
	{ 0x1bae, 0x1baf },
	{ 0x1bba, 0x1be5 },
	{ 0x1c00, 0x1c23 },
	{ 0x1c4d, 0x1c4f },
	{ 0x1c5a, 0x1c7d },
	{ 0x1c80, 0x1c88 },
	{ 0x1c90, 0x1cba },
	{ 0x1cbd, 0x1cbf },
	{ 0x1ce9, 0x1cec },
	{ 0x1cee, 0x1cf3 },
	{ 0x1cf5, 0x1cf6 },
	{ 0x1cfa, 0x1cfa },
	{ 0x1d00, 0x1dbf },
	{ 0x1e00, 0x1f15 },
	{ 0x1f18, 0x1f1d },
	{ 0x1f20, 0x1f45 },
	{ 0x1f48, 0x1f4d },
	{ 0x1f50, 0x1f57 },
	{ 0x1f59 | ODD_BIT, 0x1f5d | ODD_BIT },
	{ 0x1f5f, 0x1f7d },
	{ 0x1f80, 0x1fb4 },
	{ 0x1fb6, 0x1fbc },
	{ 0x1fbe, 0x1fbe },
	{ 0x1fc2, 0x1fc4 },
	{ 0x1fc6, 0x1fcc },
	{ 0x1fd0, 0x1fd3 },
	{ 0x1fd6, 0x1fdb },
	{ 0x1fe0, 0x1fec },
	{ 0x1ff2, 0x1ff4 },
	{ 0x1ff6, 0x1ffc },
	{ 0x2071, 0x2071 },
	{ 0x207f, 0x207f },
	{ 0x2090, 0x209c },
	{ 0x2102, 0x2102 },
	{ 0x2107, 0x2107 },
	{ 0x210a, 0x2113 },
	{ 0x2115, 0x2115 },
	{ 0x2119, 0x211d },
	{ 0x2124 | EVEN_BIT, 0x2128 | EVEN_BIT },
	{ 0x212a, 0x212d },
	{ 0x212f, 0x2139 },
	{ 0x213c, 0x213f },
	{ 0x2145, 0x2149 },
	{ 0x214e, 0x214e },
	{ 0x2183, 0x2184 },
	{ 0x2c00, 0x2c2e },
	{ 0x2c30, 0x2c5e },
	{ 0x2c60, 0x2ce4 },
	{ 0x2ceb, 0x2cee },
	{ 0x2cf2, 0x2cf3 },
	{ 0x2d00, 0x2d25 },
	{ 0x2d27, 0x2d27 },
	{ 0x2d2d, 0x2d2d },
	{ 0x2d30, 0x2d67 },
	{ 0x2d6f, 0x2d6f },
	{ 0x2d80, 0x2d96 },
	{ 0x2da0, 0x2da6 },
	{ 0x2da8, 0x2dae },
	{ 0x2db0, 0x2db6 },
	{ 0x2db8, 0x2dbe },
	{ 0x2dc0, 0x2dc6 },
	{ 0x2dc8, 0x2dce },
	{ 0x2dd0, 0x2dd6 },
	{ 0x2dd8, 0x2dde },
	{ 0x2e2f, 0x2e2f },
	{ 0x3005, 0x3006 },
	{ 0x3031, 0x3035 },
	{ 0x303b, 0x303c },
	{ 0x3041, 0x3096 },
	{ 0x309d, 0x309f },
	{ 0x30a1, 0x30fa },
	{ 0x30fc, 0x30ff },
	{ 0x3105, 0x312f },
	{ 0x3131, 0x318e },
	{ 0x31a0, 0x31bf },
	{ 0x31f0, 0x31ff },
	{ 0x3400, 0x3400 },
	{ 0x4dbf, 0x4dbf },
	{ 0x4e00, 0x4e00 },
	{ 0x9ffc, 0x9ffc },
	{ 0xa000, 0xa48c },
	{ 0xa4d0, 0xa4fd },
	{ 0xa500, 0xa60c },
	{ 0xa610, 0xa61f },
	{ 0xa62a, 0xa62b },
	{ 0xa640, 0xa66e },
	{ 0xa67f, 0xa69d },
	{ 0xa6a0, 0xa6e5 },
	{ 0xa717, 0xa71f },
	{ 0xa722, 0xa788 },
	{ 0xa78b, 0xa7bf },
	{ 0xa7c2, 0xa7ca },
	{ 0xa7f5, 0xa801 },
	{ 0xa803, 0xa805 },
	{ 0xa807, 0xa80a },
	{ 0xa80c, 0xa822 },
	{ 0xa840, 0xa873 },
	{ 0xa882, 0xa8b3 },
	{ 0xa8f2, 0xa8f7 },
	{ 0xa8fb, 0xa8fb },
	{ 0xa8fd, 0xa8fe },
	{ 0xa90a, 0xa925 },
	{ 0xa930, 0xa946 },
	{ 0xa960, 0xa97c },
	{ 0xa984, 0xa9b2 },
	{ 0xa9cf, 0xa9cf },
	{ 0xa9e0, 0xa9e4 },
	{ 0xa9e6, 0xa9ef },
	{ 0xa9fa, 0xa9fe },
	{ 0xaa00, 0xaa28 },
	{ 0xaa40, 0xaa42 },
	{ 0xaa44, 0xaa4b },
	{ 0xaa60, 0xaa76 },
	{ 0xaa7a, 0xaa7a },
	{ 0xaa7e, 0xaaaf },
	{ 0xaab1, 0xaab1 },
	{ 0xaab5, 0xaab6 },
	{ 0xaab9, 0xaabd },
	{ 0xaac0 | EVEN_BIT, 0xaac2 | EVEN_BIT },
	{ 0xaadb, 0xaadd },
	{ 0xaae0, 0xaaea },
	{ 0xaaf2, 0xaaf4 },
	{ 0xab01, 0xab06 },
	{ 0xab09, 0xab0e },
	{ 0xab11, 0xab16 },
	{ 0xab20, 0xab26 },
	{ 0xab28, 0xab2e },
	{ 0xab30, 0xab5a },
	{ 0xab5c, 0xab69 },
	{ 0xab70, 0xabe2 },
	{ 0xac00, 0xac00 },
	{ 0xd7a3, 0xd7a3 },
	{ 0xd7b0, 0xd7c6 },
	{ 0xd7cb, 0xd7fb },
	{ 0xf900, 0xfa6d },
	{ 0xfa70, 0xfad9 },
	{ 0xfb00, 0xfb06 },
	{ 0xfb13, 0xfb17 },
	{ 0xfb1d, 0xfb1d },
	{ 0xfb1f, 0xfb28 },
	{ 0xfb2a, 0xfb36 },
	{ 0xfb38, 0xfb3c },
	{ 0xfb3e, 0xfb3e },
	{ 0xfb40, 0xfb41 },
	{ 0xfb43, 0xfb44 },
	{ 0xfb46, 0xfbb1 },
	{ 0xfbd3, 0xfd3d },
	{ 0xfd50, 0xfd8f },
	{ 0xfd92, 0xfdc7 },
	{ 0xfdf0, 0xfdfb },
	{ 0xfe70, 0xfe74 },
	{ 0xfe76, 0xfefc },
	{ 0xff21, 0xff3a },
	{ 0xff41, 0xff5a },
	{ 0xff66, 0xffbe },
	{ 0xffc2, 0xffc7 },
	{ 0xffca, 0xffcf },
	{ 0xffd2, 0xffd7 },
	{ 0xffda, 0xffdc },
	{ 0x10000, 0x1000b },
	{ 0x1000d, 0x10026 },
	{ 0x10028, 0x1003a },
	{ 0x1003c, 0x1003d },
	{ 0x1003f, 0x1004d },
	{ 0x10050, 0x1005d },
	{ 0x10080, 0x100fa },
	{ 0x10280, 0x1029c },
	{ 0x102a0, 0x102d0 },
	{ 0x10300, 0x1031f },
	{ 0x1032d, 0x10340 },
	{ 0x10342, 0x10349 },
	{ 0x10350, 0x10375 },
	{ 0x10380, 0x1039d },
	{ 0x103a0, 0x103c3 },
	{ 0x103c8, 0x103cf },
	{ 0x10400, 0x1049d },
	{ 0x104b0, 0x104d3 },
	{ 0x104d8, 0x104fb },
	{ 0x10500, 0x10527 },
	{ 0x10530, 0x10563 },
	{ 0x10600, 0x10736 },
	{ 0x10740, 0x10755 },
	{ 0x10760, 0x10767 },
	{ 0x10800, 0x10805 },
	{ 0x10808, 0x10808 },
	{ 0x1080a, 0x10835 },
	{ 0x10837, 0x10838 },
	{ 0x1083c, 0x1083c },
	{ 0x1083f, 0x10855 },
	{ 0x10860, 0x10876 },
	{ 0x10880, 0x1089e },
	{ 0x108e0, 0x108f2 },
	{ 0x108f4, 0x108f5 },
	{ 0x10900, 0x10915 },
	{ 0x10920, 0x10939 },
	{ 0x10980, 0x109b7 },
	{ 0x109be, 0x109bf },
	{ 0x10a00, 0x10a00 },
	{ 0x10a10, 0x10a13 },
	{ 0x10a15, 0x10a17 },
	{ 0x10a19, 0x10a35 },
	{ 0x10a60, 0x10a7c },
	{ 0x10a80, 0x10a9c },
	{ 0x10ac0, 0x10ac7 },
	{ 0x10ac9, 0x10ae4 },
	{ 0x10b00, 0x10b35 },
	{ 0x10b40, 0x10b55 },
	{ 0x10b60, 0x10b72 },
	{ 0x10b80, 0x10b91 },
	{ 0x10c00, 0x10c48 },
	{ 0x10c80, 0x10cb2 },
	{ 0x10cc0, 0x10cf2 },
	{ 0x10d00, 0x10d23 },
	{ 0x10e80, 0x10ea9 },
	{ 0x10eb0, 0x10eb1 },
	{ 0x10f00, 0x10f1c },
	{ 0x10f27, 0x10f27 },
	{ 0x10f30, 0x10f45 },
	{ 0x10fb0, 0x10fc4 },
	{ 0x10fe0, 0x10ff6 },
	{ 0x11003, 0x11037 },
	{ 0x11083, 0x110af },
	{ 0x110d0, 0x110e8 },
	{ 0x11103, 0x11126 },
	{ 0x11144, 0x11144 },
	{ 0x11147, 0x11147 },
	{ 0x11150, 0x11172 },
	{ 0x11176, 0x11176 },
	{ 0x11183, 0x111b2 },
	{ 0x111c1, 0x111c4 },
	{ 0x111da | EVEN_BIT, 0x111dc | EVEN_BIT },
	{ 0x11200, 0x11211 },
	{ 0x11213, 0x1122b },
	{ 0x11280, 0x11286 },
	{ 0x11288, 0x11288 },
	{ 0x1128a, 0x1128d },
	{ 0x1128f, 0x1129d },
	{ 0x1129f, 0x112a8 },
	{ 0x112b0, 0x112de },
	{ 0x11305, 0x1130c },
	{ 0x1130f, 0x11310 },
	{ 0x11313, 0x11328 },
	{ 0x1132a, 0x11330 },
	{ 0x11332, 0x11333 },
	{ 0x11335, 0x11339 },
	{ 0x1133d, 0x1133d },
	{ 0x11350, 0x11350 },
	{ 0x1135d, 0x11361 },
	{ 0x11400, 0x11434 },
	{ 0x11447, 0x1144a },
	{ 0x1145f, 0x11461 },
	{ 0x11480, 0x114af },
	{ 0x114c4, 0x114c5 },
	{ 0x114c7, 0x114c7 },
	{ 0x11580, 0x115ae },
	{ 0x115d8, 0x115db },
	{ 0x11600, 0x1162f },
	{ 0x11644, 0x11644 },
	{ 0x11680, 0x116aa },
	{ 0x116b8, 0x116b8 },
	{ 0x11700, 0x1171a },
	{ 0x11800, 0x1182b },
	{ 0x118a0, 0x118df },
	{ 0x118ff, 0x11906 },
	{ 0x11909, 0x11909 },
	{ 0x1190c, 0x11913 },
	{ 0x11915, 0x11916 },
	{ 0x11918, 0x1192f },
	{ 0x1193f | ODD_BIT, 0x11941 | ODD_BIT },
	{ 0x119a0, 0x119a7 },
	{ 0x119aa, 0x119d0 },
	{ 0x119e1 | ODD_BIT, 0x119e3 | ODD_BIT },
	{ 0x11a00, 0x11a00 },
	{ 0x11a0b, 0x11a32 },
	{ 0x11a3a, 0x11a3a },
	{ 0x11a50, 0x11a50 },
	{ 0x11a5c, 0x11a89 },
	{ 0x11a9d, 0x11a9d },
	{ 0x11ac0, 0x11af8 },
	{ 0x11c00, 0x11c08 },
	{ 0x11c0a, 0x11c2e },
	{ 0x11c40, 0x11c40 },
	{ 0x11c72, 0x11c8f },
	{ 0x11d00, 0x11d06 },
	{ 0x11d08, 0x11d09 },
	{ 0x11d0b, 0x11d30 },
	{ 0x11d46, 0x11d46 },
	{ 0x11d60, 0x11d65 },
	{ 0x11d67, 0x11d68 },
	{ 0x11d6a, 0x11d89 },
	{ 0x11d98, 0x11d98 },
	{ 0x11ee0, 0x11ef2 },
	{ 0x11fb0, 0x11fb0 },
	{ 0x12000, 0x12399 },
	{ 0x12480, 0x12543 },
	{ 0x13000, 0x1342e },
	{ 0x14400, 0x14646 },
	{ 0x16800, 0x16a38 },
	{ 0x16a40, 0x16a5e },
	{ 0x16ad0, 0x16aed },
	{ 0x16b00, 0x16b2f },
	{ 0x16b40, 0x16b43 },
	{ 0x16b63, 0x16b77 },
	{ 0x16b7d, 0x16b8f },
	{ 0x16e40, 0x16e7f },
	{ 0x16f00, 0x16f4a },
	{ 0x16f50, 0x16f50 },
	{ 0x16f93, 0x16f9f },
	{ 0x16fe0, 0x16fe1 },
	{ 0x16fe3, 0x16fe3 },
	{ 0x17000, 0x17000 },
	{ 0x187f7, 0x187f7 },
	{ 0x18800, 0x18cd5 },
	{ 0x18d00, 0x18d00 },
	{ 0x18d08, 0x18d08 },
	{ 0x1b000, 0x1b11e },
	{ 0x1b150, 0x1b152 },
	{ 0x1b164, 0x1b167 },
	{ 0x1b170, 0x1b2fb },
	{ 0x1bc00, 0x1bc6a },
	{ 0x1bc70, 0x1bc7c },
	{ 0x1bc80, 0x1bc88 },
	{ 0x1bc90, 0x1bc99 },
	{ 0x1d400, 0x1d454 },
	{ 0x1d456, 0x1d49c },
	{ 0x1d49e, 0x1d49f },
	{ 0x1d4a2, 0x1d4a2 },
	{ 0x1d4a5, 0x1d4a6 },
	{ 0x1d4a9, 0x1d4ac },
	{ 0x1d4ae, 0x1d4b9 },
	{ 0x1d4bb, 0x1d4bb },
	{ 0x1d4bd, 0x1d4c3 },
	{ 0x1d4c5, 0x1d505 },
	{ 0x1d507, 0x1d50a },
	{ 0x1d50d, 0x1d514 },
	{ 0x1d516, 0x1d51c },
	{ 0x1d51e, 0x1d539 },
	{ 0x1d53b, 0x1d53e },
	{ 0x1d540, 0x1d544 },
	{ 0x1d546, 0x1d546 },
	{ 0x1d54a, 0x1d550 },
	{ 0x1d552, 0x1d6a5 },
	{ 0x1d6a8, 0x1d6c0 },
	{ 0x1d6c2, 0x1d6da },
	{ 0x1d6dc, 0x1d6fa },
	{ 0x1d6fc, 0x1d714 },
	{ 0x1d716, 0x1d734 },
	{ 0x1d736, 0x1d74e },
	{ 0x1d750, 0x1d76e },
	{ 0x1d770, 0x1d788 },
	{ 0x1d78a, 0x1d7a8 },
	{ 0x1d7aa, 0x1d7c2 },
	{ 0x1d7c4, 0x1d7cb },
	{ 0x1e100, 0x1e12c },
	{ 0x1e137, 0x1e13d },
	{ 0x1e14e, 0x1e14e },
	{ 0x1e2c0, 0x1e2eb },
	{ 0x1e800, 0x1e8c4 },
	{ 0x1e900, 0x1e943 },
	{ 0x1e94b, 0x1e94b },
	{ 0x1ee00, 0x1ee03 },
	{ 0x1ee05, 0x1ee1f },
	{ 0x1ee21, 0x1ee22 },
	{ 0x1ee24, 0x1ee24 },
	{ 0x1ee27, 0x1ee27 },
	{ 0x1ee29, 0x1ee32 },
	{ 0x1ee34, 0x1ee37 },
	{ 0x1ee39 | ODD_BIT, 0x1ee3b | ODD_BIT },
	{ 0x1ee42, 0x1ee42 },
	{ 0x1ee47 | ODD_BIT, 0x1ee4b | ODD_BIT },
	{ 0x1ee4d, 0x1ee4f },
	{ 0x1ee51, 0x1ee52 },
	{ 0x1ee54, 0x1ee54 },
	{ 0x1ee57 | ODD_BIT, 0x1ee5f | ODD_BIT },
	{ 0x1ee61, 0x1ee62 },
	{ 0x1ee64, 0x1ee64 },
	{ 0x1ee67, 0x1ee6a },
	{ 0x1ee6c, 0x1ee72 },
	{ 0x1ee74, 0x1ee77 },
	{ 0x1ee79, 0x1ee7c },
	{ 0x1ee7e, 0x1ee7e },
	{ 0x1ee80, 0x1ee89 },
	{ 0x1ee8b, 0x1ee9b },
	{ 0x1eea1, 0x1eea3 },
	{ 0x1eea5, 0x1eea9 },
	{ 0x1eeab, 0x1eebb },
	{ 0x20000, 0x20000 },
	{ 0x2a6dd, 0x2a6dd },
	{ 0x2a700, 0x2a700 },
	{ 0x2b734, 0x2b734 },
	{ 0x2b740, 0x2b740 },
	{ 0x2b81d, 0x2b81d },
	{ 0x2b820, 0x2b820 },
	{ 0x2cea1, 0x2cea1 },
	{ 0x2ceb0, 0x2ceb0 },
	{ 0x2ebe0, 0x2ebe0 },
	{ 0x2f800, 0x2fa1d },
	{ 0x30000, 0x30000 },
	{ 0x3134a, 0x3134a }
};

static constexpr const utf_range marks[] = { //  M
	{ 0x300, 0x36f },
	{ 0x483, 0x489 },
	{ 0x591, 0x5bd },
	{ 0x5bf, 0x5bf },
	{ 0x5c1, 0x5c2 },
	{ 0x5c4, 0x5c5 },
	{ 0x5c7, 0x5c7 },
	{ 0x610, 0x61a },
	{ 0x64b, 0x65f },
	{ 0x670, 0x670 },
	{ 0x6d6, 0x6dc },
	{ 0x6df, 0x6e4 },
	{ 0x6e7, 0x6e8 },
	{ 0x6ea, 0x6ed },
	{ 0x711, 0x711 },
	{ 0x730, 0x74a },
	{ 0x7a6, 0x7b0 },
	{ 0x7eb, 0x7f3 },
	{ 0x7fd, 0x7fd },
	{ 0x816, 0x819 },
	{ 0x81b, 0x823 },
	{ 0x825, 0x827 },
	{ 0x829, 0x82d },
	{ 0x859, 0x85b },
	{ 0x8d3, 0x8e1 },
	{ 0x8e3, 0x903 },
	{ 0x93a, 0x93c },
	{ 0x93e, 0x94f },
	{ 0x951, 0x957 },
	{ 0x962, 0x963 },
	{ 0x981, 0x983 },
	{ 0x9bc, 0x9bc },
	{ 0x9be, 0x9c4 },
	{ 0x9c7, 0x9c8 },
	{ 0x9cb, 0x9cd },
	{ 0x9d7, 0x9d7 },
	{ 0x9e2, 0x9e3 },
	{ 0x9fe, 0x9fe },
	{ 0xa01, 0xa03 },
	{ 0xa3c, 0xa3c },
	{ 0xa3e, 0xa42 },
	{ 0xa47, 0xa48 },
	{ 0xa4b, 0xa4d },
	{ 0xa51, 0xa51 },
	{ 0xa70, 0xa71 },
	{ 0xa75, 0xa75 },
	{ 0xa81, 0xa83 },
	{ 0xabc, 0xabc },
	{ 0xabe, 0xac5 },
	{ 0xac7, 0xac9 },
	{ 0xacb, 0xacd },
	{ 0xae2, 0xae3 },
	{ 0xafa, 0xaff },
	{ 0xb01, 0xb03 },
	{ 0xb3c, 0xb3c },
	{ 0xb3e, 0xb44 },
	{ 0xb47, 0xb48 },
	{ 0xb4b, 0xb4d },
	{ 0xb55, 0xb57 },
	{ 0xb62, 0xb63 },
	{ 0xb82, 0xb82 },
	{ 0xbbe, 0xbc2 },
	{ 0xbc6, 0xbc8 },
	{ 0xbca, 0xbcd },
	{ 0xbd7, 0xbd7 },
	{ 0xc00, 0xc04 },
	{ 0xc3e, 0xc44 },
	{ 0xc46, 0xc48 },
	{ 0xc4a, 0xc4d },
	{ 0xc55, 0xc56 },
	{ 0xc62, 0xc63 },
	{ 0xc81, 0xc83 },
	{ 0xcbc, 0xcbc },
	{ 0xcbe, 0xcc4 },
	{ 0xcc6, 0xcc8 },
	{ 0xcca, 0xccd },
	{ 0xcd5, 0xcd6 },
	{ 0xce2, 0xce3 },
	{ 0xd00, 0xd03 },
	{ 0xd3b, 0xd3c },
	{ 0xd3e, 0xd44 },
	{ 0xd46, 0xd48 },
	{ 0xd4a, 0xd4d },
	{ 0xd57, 0xd57 },
	{ 0xd62, 0xd63 },
	{ 0xd81, 0xd83 },
	{ 0xdca, 0xdca },
	{ 0xdcf, 0xdd4 },
	{ 0xdd6, 0xdd6 },
	{ 0xdd8, 0xddf },
	{ 0xdf2, 0xdf3 },
	{ 0xe31, 0xe31 },
	{ 0xe34, 0xe3a },
	{ 0xe47, 0xe4e },
	{ 0xeb1, 0xeb1 },
	{ 0xeb4, 0xebc },
	{ 0xec8, 0xecd },
	{ 0xf18, 0xf19 },
	{ 0xf35 | ODD_BIT, 0xf39 | ODD_BIT },
	{ 0xf3e, 0xf3f },
	{ 0xf71, 0xf84 },
	{ 0xf86, 0xf87 },
	{ 0xf8d, 0xf97 },
	{ 0xf99, 0xfbc },
	{ 0xfc6, 0xfc6 },
	{ 0x102b, 0x103e },
	{ 0x1056, 0x1059 },
	{ 0x105e, 0x1060 },
	{ 0x1062, 0x1064 },
	{ 0x1067, 0x106d },
	{ 0x1071, 0x1074 },
	{ 0x1082, 0x108d },
	{ 0x108f, 0x108f },
	{ 0x109a, 0x109d },
	{ 0x135d, 0x135f },
	{ 0x1712, 0x1714 },
	{ 0x1732, 0x1734 },
	{ 0x1752, 0x1753 },
	{ 0x1772, 0x1773 },
	{ 0x17b4, 0x17d3 },
	{ 0x17dd, 0x17dd },
	{ 0x180b, 0x180d },
	{ 0x1885, 0x1886 },
	{ 0x18a9, 0x18a9 },
	{ 0x1920, 0x192b },
	{ 0x1930, 0x193b },
	{ 0x1a17, 0x1a1b },
	{ 0x1a55, 0x1a5e },
	{ 0x1a60, 0x1a7c },
	{ 0x1a7f, 0x1a7f },
	{ 0x1ab0, 0x1ac0 },
	{ 0x1b00, 0x1b04 },
	{ 0x1b34, 0x1b44 },
	{ 0x1b6b, 0x1b73 },
	{ 0x1b80, 0x1b82 },
	{ 0x1ba1, 0x1bad },
	{ 0x1be6, 0x1bf3 },
	{ 0x1c24, 0x1c37 },
	{ 0x1cd0, 0x1cd2 },
	{ 0x1cd4, 0x1ce8 },
	{ 0x1ced, 0x1ced },
	{ 0x1cf4, 0x1cf4 },
	{ 0x1cf7, 0x1cf9 },
	{ 0x1dc0, 0x1df9 },
	{ 0x1dfb, 0x1dff },
	{ 0x20d0, 0x20f0 },
	{ 0x2cef, 0x2cf1 },
	{ 0x2d7f, 0x2d7f },
	{ 0x2de0, 0x2dff },
	{ 0x302a, 0x302f },
	{ 0x3099, 0x309a },
	{ 0xa66f, 0xa672 },
	{ 0xa674, 0xa67d },
	{ 0xa69e, 0xa69f },
	{ 0xa6f0, 0xa6f1 },
	{ 0xa802, 0xa802 },
	{ 0xa806, 0xa806 },
	{ 0xa80b, 0xa80b },
	{ 0xa823, 0xa827 },
	{ 0xa82c, 0xa82c },
	{ 0xa880, 0xa881 },
	{ 0xa8b4, 0xa8c5 },
	{ 0xa8e0, 0xa8f1 },
	{ 0xa8ff, 0xa8ff },
	{ 0xa926, 0xa92d },
	{ 0xa947, 0xa953 },
	{ 0xa980, 0xa983 },
	{ 0xa9b3, 0xa9c0 },
	{ 0xa9e5, 0xa9e5 },
	{ 0xaa29, 0xaa36 },
	{ 0xaa43, 0xaa43 },
	{ 0xaa4c, 0xaa4d },
	{ 0xaa7b, 0xaa7d },
	{ 0xaab0, 0xaab0 },
	{ 0xaab2, 0xaab4 },
	{ 0xaab7, 0xaab8 },
	{ 0xaabe, 0xaabf },
	{ 0xaac1, 0xaac1 },
	{ 0xaaeb, 0xaaef },
	{ 0xaaf5, 0xaaf6 },
	{ 0xabe3, 0xabea },
	{ 0xabec, 0xabed },
	{ 0xfb1e, 0xfb1e },
	{ 0xfe00, 0xfe0f },
	{ 0xfe20, 0xfe2f },
	{ 0x101fd, 0x101fd },
	{ 0x102e0, 0x102e0 },
	{ 0x10376, 0x1037a },
	{ 0x10a01, 0x10a03 },
	{ 0x10a05, 0x10a06 },
	{ 0x10a0c, 0x10a0f },
	{ 0x10a38, 0x10a3a },
	{ 0x10a3f, 0x10a3f },
	{ 0x10ae5, 0x10ae6 },
	{ 0x10d24, 0x10d27 },
	{ 0x10eab, 0x10eac },
	{ 0x10f46, 0x10f50 },
	{ 0x11000, 0x11002 },
	{ 0x11038, 0x11046 },
	{ 0x1107f, 0x11082 },
	{ 0x110b0, 0x110ba },
	{ 0x11100, 0x11102 },
	{ 0x11127, 0x11134 },
	{ 0x11145, 0x11146 },
	{ 0x11173, 0x11173 },
	{ 0x11180, 0x11182 },
	{ 0x111b3, 0x111c0 },
	{ 0x111c9, 0x111cc },
	{ 0x111ce, 0x111cf },
	{ 0x1122c, 0x11237 },
	{ 0x1123e, 0x1123e },
	{ 0x112df, 0x112ea },
	{ 0x11300, 0x11303 },
	{ 0x1133b, 0x1133c },
	{ 0x1133e, 0x11344 },
	{ 0x11347, 0x11348 },
	{ 0x1134b, 0x1134d },
	{ 0x11357, 0x11357 },
	{ 0x11362, 0x11363 },
	{ 0x11366, 0x1136c },
	{ 0x11370, 0x11374 },
	{ 0x11435, 0x11446 },
	{ 0x1145e, 0x1145e },
	{ 0x114b0, 0x114c3 },
	{ 0x115af, 0x115b5 },
	{ 0x115b8, 0x115c0 },
	{ 0x115dc, 0x115dd },
	{ 0x11630, 0x11640 },
	{ 0x116ab, 0x116b7 },
	{ 0x1171d, 0x1172b },
	{ 0x1182c, 0x1183a },
	{ 0x11930, 0x11935 },
	{ 0x11937, 0x11938 },
	{ 0x1193b, 0x1193e },
	{ 0x11940, 0x11940 },
	{ 0x11942, 0x11943 },
	{ 0x119d1, 0x119d7 },
	{ 0x119da, 0x119e0 },
	{ 0x119e4, 0x119e4 },
	{ 0x11a01, 0x11a0a },
	{ 0x11a33, 0x11a39 },
	{ 0x11a3b, 0x11a3e },
	{ 0x11a47, 0x11a47 },
	{ 0x11a51, 0x11a5b },
	{ 0x11a8a, 0x11a99 },
	{ 0x11c2f, 0x11c36 },
	{ 0x11c38, 0x11c3f },
	{ 0x11c92, 0x11ca7 },
	{ 0x11ca9, 0x11cb6 },
	{ 0x11d31, 0x11d36 },
	{ 0x11d3a, 0x11d3a },
	{ 0x11d3c, 0x11d3d },
	{ 0x11d3f, 0x11d45 },
	{ 0x11d47, 0x11d47 },
	{ 0x11d8a, 0x11d8e },
	{ 0x11d90, 0x11d91 },
	{ 0x11d93, 0x11d97 },
	{ 0x11ef3, 0x11ef6 },
	{ 0x16af0, 0x16af4 },
	{ 0x16b30, 0x16b36 },
	{ 0x16f4f, 0x16f4f },
	{ 0x16f51, 0x16f87 },
	{ 0x16f8f, 0x16f92 },
	{ 0x16fe4, 0x16fe4 },
	{ 0x16ff0, 0x16ff1 },
	{ 0x1bc9d, 0x1bc9e },
	{ 0x1d165, 0x1d169 },
	{ 0x1d16d, 0x1d172 },
	{ 0x1d17b, 0x1d182 },
	{ 0x1d185, 0x1d18b },
	{ 0x1d1aa, 0x1d1ad },
	{ 0x1d242, 0x1d244 },
	{ 0x1da00, 0x1da36 },
	{ 0x1da3b, 0x1da6c },
	{ 0x1da75, 0x1da75 },
	{ 0x1da84, 0x1da84 },
	{ 0x1da9b, 0x1da9f },
	{ 0x1daa1, 0x1daaf },
	{ 0x1e000, 0x1e006 },
	{ 0x1e008, 0x1e018 },
	{ 0x1e01b, 0x1e021 },
	{ 0x1e023, 0x1e024 },
	{ 0x1e026, 0x1e02a },
	{ 0x1e130, 0x1e136 },
	{ 0x1e2ec, 0x1e2ef },
	{ 0x1e8d0, 0x1e8d6 },
	{ 0x1e944, 0x1e94a },
	{ 0xe0100, 0xe01ef }
};

static constexpr const utf_range numbers[] = { //  N
	{ 0x30, 0x39 },
	{ 0xb2, 0xb3 },
	{ 0xb9, 0xb9 },
	{ 0xbc, 0xbe },
	{ 0x660, 0x669 },
	{ 0x6f0, 0x6f9 },
	{ 0x7c0, 0x7c9 },
	{ 0x966, 0x96f },
	{ 0x9e6, 0x9ef },
	{ 0x9f4, 0x9f9 },
	{ 0xa66, 0xa6f },
	{ 0xae6, 0xaef },
	{ 0xb66, 0xb6f },
	{ 0xb72, 0xb77 },
	{ 0xbe6, 0xbf2 },
	{ 0xc66, 0xc6f },
	{ 0xc78, 0xc7e },
	{ 0xce6, 0xcef },
	{ 0xd58, 0xd5e },
	{ 0xd66, 0xd78 },
	{ 0xde6, 0xdef },
	{ 0xe50, 0xe59 },
	{ 0xed0, 0xed9 },
	{ 0xf20, 0xf33 },
	{ 0x1040, 0x1049 },
	{ 0x1090, 0x1099 },
	{ 0x1369, 0x137c },
	{ 0x16ee, 0x16f0 },
	{ 0x17e0, 0x17e9 },
	{ 0x17f0, 0x17f9 },
	{ 0x1810, 0x1819 },
	{ 0x1946, 0x194f },
	{ 0x19d0, 0x19da },
	{ 0x1a80, 0x1a89 },
	{ 0x1a90, 0x1a99 },
	{ 0x1b50, 0x1b59 },
	{ 0x1bb0, 0x1bb9 },
	{ 0x1c40, 0x1c49 },
	{ 0x1c50, 0x1c59 },
	{ 0x2070, 0x2070 },
	{ 0x2074, 0x2079 },
	{ 0x2080, 0x2089 },
	{ 0x2150, 0x2182 },
	{ 0x2185, 0x2189 },
	{ 0x2460, 0x249b },
	{ 0x24ea, 0x24ff },
	{ 0x2776, 0x2793 },
	{ 0x2cfd, 0x2cfd },
	{ 0x3007, 0x3007 },
	{ 0x3021, 0x3029 },
	{ 0x3038, 0x303a },
	{ 0x3192, 0x3195 },
	{ 0x3220, 0x3229 },
	{ 0x3248, 0x324f },
	{ 0x3251, 0x325f },
	{ 0x3280, 0x3289 },
	{ 0x32b1, 0x32bf },
	{ 0xa620, 0xa629 },
	{ 0xa6e6, 0xa6ef },
	{ 0xa830, 0xa835 },
	{ 0xa8d0, 0xa8d9 },
	{ 0xa900, 0xa909 },
	{ 0xa9d0, 0xa9d9 },
	{ 0xa9f0, 0xa9f9 },
	{ 0xaa50, 0xaa59 },
	{ 0xabf0, 0xabf9 },
	{ 0xff10, 0xff19 },
	{ 0x10107, 0x10133 },
	{ 0x10140, 0x10178 },
	{ 0x1018a, 0x1018b },
	{ 0x102e1, 0x102fb },
	{ 0x10320, 0x10323 },
	{ 0x10341, 0x10341 },
	{ 0x1034a, 0x1034a },
	{ 0x103d1, 0x103d5 },
	{ 0x104a0, 0x104a9 },
	{ 0x10858, 0x1085f },
	{ 0x10879, 0x1087f },
	{ 0x108a7, 0x108af },
	{ 0x108fb, 0x108ff },
	{ 0x10916, 0x1091b },
	{ 0x109bc, 0x109bd },
	{ 0x109c0, 0x109cf },
	{ 0x109d2, 0x109ff },
	{ 0x10a40, 0x10a48 },
	{ 0x10a7d, 0x10a7e },
	{ 0x10a9d, 0x10a9f },
	{ 0x10aeb, 0x10aef },
	{ 0x10b58, 0x10b5f },
	{ 0x10b78, 0x10b7f },
	{ 0x10ba9, 0x10baf },
	{ 0x10cfa, 0x10cff },
	{ 0x10d30, 0x10d39 },
	{ 0x10e60, 0x10e7e },
	{ 0x10f1d, 0x10f26 },
	{ 0x10f51, 0x10f54 },
	{ 0x10fc5, 0x10fcb },
	{ 0x11052, 0x1106f },
	{ 0x110f0, 0x110f9 },
	{ 0x11136, 0x1113f },
	{ 0x111d0, 0x111d9 },
	{ 0x111e1, 0x111f4 },
	{ 0x112f0, 0x112f9 },
	{ 0x11450, 0x11459 },
	{ 0x114d0, 0x114d9 },
	{ 0x11650, 0x11659 },
	{ 0x116c0, 0x116c9 },
	{ 0x11730, 0x1173b },
	{ 0x118e0, 0x118f2 },
	{ 0x11950, 0x11959 },
	{ 0x11c50, 0x11c6c },
	{ 0x11d50, 0x11d59 },
	{ 0x11da0, 0x11da9 },
	{ 0x11fc0, 0x11fd4 },
	{ 0x12400, 0x1246e },
	{ 0x16a60, 0x16a69 },
	{ 0x16b50, 0x16b59 },
	{ 0x16b5b, 0x16b61 },
	{ 0x16e80, 0x16e96 },
	{ 0x1d2e0, 0x1d2f3 },
	{ 0x1d360, 0x1d378 },
	{ 0x1d7ce, 0x1d7ff },
	{ 0x1e140, 0x1e149 },
	{ 0x1e2f0, 0x1e2f9 },
	{ 0x1e8c7, 0x1e8cf },
	{ 0x1e950, 0x1e959 },
	{ 0x1ec71, 0x1ecab },
	{ 0x1ecad, 0x1ecaf },
	{ 0x1ecb1, 0x1ecb4 },
	{ 0x1ed01, 0x1ed2d },
	{ 0x1ed2f, 0x1ed3d },
	{ 0x1f100, 0x1f10c },
	{ 0x1fbf0, 0x1fbf9 }
};

static constexpr const utf_range punctuation[] = { //  P
	{ 0x21, 0x23 },
	{ 0x25, 0x2a },
	{ 0x2c, 0x2f },
	{ 0x3a, 0x3b },
	{ 0x3f, 0x40 },
	{ 0x5b, 0x5d },
	{ 0x5f, 0x5f },
	{ 0x7b | ODD_BIT, 0x7d | ODD_BIT },
	{ 0xa1, 0xa1 },
	{ 0xa7, 0xa7 },
	{ 0xab, 0xab },
	{ 0xb6, 0xb7 },
	{ 0xbb, 0xbb },
	{ 0xbf, 0xbf },
	{ 0x37e, 0x37e },
	{ 0x387, 0x387 },
	{ 0x55a, 0x55f },
	{ 0x589, 0x58a },
	{ 0x5be | EVEN_BIT, 0x5c0 | EVEN_BIT },
	{ 0x5c3, 0x5c3 },
	{ 0x5c6, 0x5c6 },
	{ 0x5f3, 0x5f4 },
	{ 0x609, 0x60a },
	{ 0x60c, 0x60d },
	{ 0x61b, 0x61b },
	{ 0x61e, 0x61f },
	{ 0x66a, 0x66d },
	{ 0x6d4, 0x6d4 },
	{ 0x700, 0x70d },
	{ 0x7f7, 0x7f9 },
	{ 0x830, 0x83e },
	{ 0x85e, 0x85e },
	{ 0x964, 0x965 },
	{ 0x970, 0x970 },
	{ 0x9fd, 0x9fd },
	{ 0xa76, 0xa76 },
	{ 0xaf0, 0xaf0 },
	{ 0xc77, 0xc77 },
	{ 0xc84, 0xc84 },
	{ 0xdf4, 0xdf4 },
	{ 0xe4f, 0xe4f },
	{ 0xe5a, 0xe5b },
	{ 0xf04, 0xf12 },
	{ 0xf14, 0xf14 },
	{ 0xf3a, 0xf3d },
	{ 0xf85, 0xf85 },
	{ 0xfd0, 0xfd4 },
	{ 0xfd9, 0xfda },
	{ 0x104a, 0x104f },
	{ 0x10fb, 0x10fb },
	{ 0x1360, 0x1368 },
	{ 0x1400, 0x1400 },
	{ 0x166e, 0x166e },
	{ 0x169b, 0x169c },
	{ 0x16eb, 0x16ed },
	{ 0x1735, 0x1736 },
	{ 0x17d4, 0x17d6 },
	{ 0x17d8, 0x17da },
	{ 0x1800, 0x180a },
	{ 0x1944, 0x1945 },
	{ 0x1a1e, 0x1a1f },
	{ 0x1aa0, 0x1aa6 },
	{ 0x1aa8, 0x1aad },
	{ 0x1b5a, 0x1b60 },
	{ 0x1bfc, 0x1bff },
	{ 0x1c3b, 0x1c3f },
	{ 0x1c7e, 0x1c7f },
	{ 0x1cc0, 0x1cc7 },
	{ 0x1cd3, 0x1cd3 },
	{ 0x2010, 0x2027 },
	{ 0x2030, 0x2043 },
	{ 0x2045, 0x2051 },
	{ 0x2053, 0x205e },
	{ 0x207d, 0x207e },
	{ 0x208d, 0x208e },
	{ 0x2308, 0x230b },
	{ 0x2329, 0x232a },
	{ 0x2768, 0x2775 },
	{ 0x27c5, 0x27c6 },
	{ 0x27e6, 0x27ef },
	{ 0x2983, 0x2998 },
	{ 0x29d8, 0x29db },
	{ 0x29fc, 0x29fd },
	{ 0x2cf9, 0x2cfc },
	{ 0x2cfe, 0x2cff },
	{ 0x2d70, 0x2d70 },
	{ 0x2e00, 0x2e2e },
	{ 0x2e30, 0x2e4f },
	{ 0x2e52, 0x2e52 },
	{ 0x3001, 0x3003 },
	{ 0x3008, 0x3011 },
	{ 0x3014, 0x301f },
	{ 0x3030, 0x3030 },
	{ 0x303d, 0x303d },
	{ 0x30a0, 0x30a0 },
	{ 0x30fb, 0x30fb },
	{ 0xa4fe, 0xa4ff },
	{ 0xa60d, 0xa60f },
	{ 0xa673, 0xa673 },
	{ 0xa67e, 0xa67e },
	{ 0xa6f2, 0xa6f7 },
	{ 0xa874, 0xa877 },
	{ 0xa8ce, 0xa8cf },
	{ 0xa8f8, 0xa8fa },
	{ 0xa8fc, 0xa8fc },
	{ 0xa92e, 0xa92f },
	{ 0xa95f, 0xa95f },
	{ 0xa9c1, 0xa9cd },
	{ 0xa9de, 0xa9df },
	{ 0xaa5c, 0xaa5f },
	{ 0xaade, 0xaadf },
	{ 0xaaf0, 0xaaf1 },
	{ 0xabeb, 0xabeb },
	{ 0xfd3e, 0xfd3f },
	{ 0xfe10, 0xfe19 },
	{ 0xfe30, 0xfe52 },
	{ 0xfe54, 0xfe61 },
	{ 0xfe63, 0xfe63 },
	{ 0xfe68, 0xfe68 },
	{ 0xfe6a, 0xfe6b },
	{ 0xff01, 0xff03 },
	{ 0xff05, 0xff0a },
	{ 0xff0c, 0xff0f },
	{ 0xff1a, 0xff1b },
	{ 0xff1f, 0xff20 },
	{ 0xff3b, 0xff3d },
	{ 0xff3f, 0xff3f },
	{ 0xff5b | ODD_BIT, 0xff5d | ODD_BIT },
	{ 0xff5f, 0xff65 },
	{ 0x10100, 0x10102 },
	{ 0x1039f, 0x1039f },
	{ 0x103d0, 0x103d0 },
	{ 0x1056f, 0x1056f },
	{ 0x10857, 0x10857 },
	{ 0x1091f, 0x1091f },
	{ 0x1093f, 0x1093f },
	{ 0x10a50, 0x10a58 },
	{ 0x10a7f, 0x10a7f },
	{ 0x10af0, 0x10af6 },
	{ 0x10b39, 0x10b3f },
	{ 0x10b99, 0x10b9c },
	{ 0x10ead, 0x10ead },
	{ 0x10f55, 0x10f59 },
	{ 0x11047, 0x1104d },
	{ 0x110bb, 0x110bc },
	{ 0x110be, 0x110c1 },
	{ 0x11140, 0x11143 },
	{ 0x11174, 0x11175 },
	{ 0x111c5, 0x111c8 },
	{ 0x111cd, 0x111cd },
	{ 0x111db, 0x111db },
	{ 0x111dd, 0x111df },
	{ 0x11238, 0x1123d },
	{ 0x112a9, 0x112a9 },
	{ 0x1144b, 0x1144f },
	{ 0x1145a, 0x1145b },
	{ 0x1145d, 0x1145d },
	{ 0x114c6, 0x114c6 },
	{ 0x115c1, 0x115d7 },
	{ 0x11641, 0x11643 },
	{ 0x11660, 0x1166c },
	{ 0x1173c, 0x1173e },
	{ 0x1183b, 0x1183b },
	{ 0x11944, 0x11946 },
	{ 0x119e2, 0x119e2 },
	{ 0x11a3f, 0x11a46 },
	{ 0x11a9a, 0x11a9c },
	{ 0x11a9e, 0x11aa2 },
	{ 0x11c41, 0x11c45 },
	{ 0x11c70, 0x11c71 },
	{ 0x11ef7, 0x11ef8 },
	{ 0x11fff, 0x11fff },
	{ 0x12470, 0x12474 },
	{ 0x16a6e, 0x16a6f },
	{ 0x16af5, 0x16af5 },
	{ 0x16b37, 0x16b3b },
	{ 0x16b44, 0x16b44 },
	{ 0x16e97, 0x16e9a },
	{ 0x16fe2, 0x16fe2 },
	{ 0x1bc9f, 0x1bc9f },
	{ 0x1da87, 0x1da8b },
	{ 0x1e95e, 0x1e95f }
};

static constexpr const utf_range symbols[] = { //  S
	{ 0x24, 0x24 },
	{ 0x2b, 0x2b },
	{ 0x3c, 0x3e },
	{ 0x5e | EVEN_BIT, 0x60 | EVEN_BIT },
	{ 0x7c | EVEN_BIT, 0x7e | EVEN_BIT },
	{ 0xa2, 0xa6 },
	{ 0xa8, 0xa9 },
	{ 0xac, 0xac },
	{ 0xae, 0xb1 },
	{ 0xb4, 0xb4 },
	{ 0xb8, 0xb8 },
	{ 0xd7, 0xd7 },
	{ 0xf7, 0xf7 },
	{ 0x2c2, 0x2c5 },
	{ 0x2d2, 0x2df },
	{ 0x2e5, 0x2eb },
	{ 0x2ed, 0x2ed },
	{ 0x2ef, 0x2ff },
	{ 0x375, 0x375 },
	{ 0x384, 0x385 },
	{ 0x3f6, 0x3f6 },
	{ 0x482, 0x482 },
	{ 0x58d, 0x58f },
	{ 0x606, 0x608 },
	{ 0x60b, 0x60b },
	{ 0x60e, 0x60f },
	{ 0x6de, 0x6de },
	{ 0x6e9, 0x6e9 },
	{ 0x6fd, 0x6fe },
	{ 0x7f6, 0x7f6 },
	{ 0x7fe, 0x7ff },
	{ 0x9f2, 0x9f3 },
	{ 0x9fa, 0x9fb },
	{ 0xaf1, 0xaf1 },
	{ 0xb70, 0xb70 },
	{ 0xbf3, 0xbfa },
	{ 0xc7f, 0xc7f },
	{ 0xd4f, 0xd4f },
	{ 0xd79, 0xd79 },
	{ 0xe3f, 0xe3f },
	{ 0xf01, 0xf03 },
	{ 0xf13, 0xf13 },
	{ 0xf15, 0xf17 },
	{ 0xf1a, 0xf1f },
	{ 0xf34 | EVEN_BIT, 0xf38 | EVEN_BIT },
	{ 0xfbe, 0xfc5 },
	{ 0xfc7, 0xfcc },
	{ 0xfce, 0xfcf },
	{ 0xfd5, 0xfd8 },
	{ 0x109e, 0x109f },
	{ 0x1390, 0x1399 },
	{ 0x166d, 0x166d },
	{ 0x17db, 0x17db },
	{ 0x1940, 0x1940 },
	{ 0x19de, 0x19ff },
	{ 0x1b61, 0x1b6a },
	{ 0x1b74, 0x1b7c },
	{ 0x1fbd, 0x1fbd },
	{ 0x1fbf, 0x1fc1 },
	{ 0x1fcd, 0x1fcf },
	{ 0x1fdd, 0x1fdf },
	{ 0x1fed, 0x1fef },
	{ 0x1ffd, 0x1ffe },
	{ 0x2044, 0x2044 },
	{ 0x2052, 0x2052 },
	{ 0x207a, 0x207c },
	{ 0x208a, 0x208c },
	{ 0x20a0, 0x20bf },
	{ 0x2100, 0x2101 },
	{ 0x2103, 0x2106 },
	{ 0x2108, 0x2109 },
	{ 0x2114, 0x2114 },
	{ 0x2116, 0x2118 },
	{ 0x211e, 0x2123 },
	{ 0x2125 | ODD_BIT, 0x2129 | ODD_BIT },
	{ 0x212e, 0x212e },
	{ 0x213a, 0x213b },
	{ 0x2140, 0x2144 },
	{ 0x214a, 0x214d },
	{ 0x214f, 0x214f },
	{ 0x218a, 0x218b },
	{ 0x2190, 0x2307 },
	{ 0x230c, 0x2328 },
	{ 0x232b, 0x2426 },
	{ 0x2440, 0x244a },
	{ 0x249c, 0x24e9 },
	{ 0x2500, 0x2767 },
	{ 0x2794, 0x27c4 },
	{ 0x27c7, 0x27e5 },
	{ 0x27f0, 0x2982 },
	{ 0x2999, 0x29d7 },
	{ 0x29dc, 0x29fb },
	{ 0x29fe, 0x2b73 },
	{ 0x2b76, 0x2b95 },
	{ 0x2b97, 0x2bff },
	{ 0x2ce5, 0x2cea },
	{ 0x2e50, 0x2e51 },
	{ 0x2e80, 0x2e99 },
	{ 0x2e9b, 0x2ef3 },
	{ 0x2f00, 0x2fd5 },
	{ 0x2ff0, 0x2ffb },
	{ 0x3004, 0x3004 },
	{ 0x3012, 0x3013 },
	{ 0x3020, 0x3020 },
	{ 0x3036, 0x3037 },
	{ 0x303e, 0x303f },
	{ 0x309b, 0x309c },
	{ 0x3190, 0x3191 },
	{ 0x3196, 0x319f },
	{ 0x31c0, 0x31e3 },
	{ 0x3200, 0x321e },
	{ 0x322a, 0x3247 },
	{ 0x3250, 0x3250 },
	{ 0x3260, 0x327f },
	{ 0x328a, 0x32b0 },
	{ 0x32c0, 0x33ff },
	{ 0x4dc0, 0x4dff },
	{ 0xa490, 0xa4c6 },
	{ 0xa700, 0xa716 },
	{ 0xa720, 0xa721 },
	{ 0xa789, 0xa78a },
	{ 0xa828, 0xa82b },
	{ 0xa836, 0xa839 },
	{ 0xaa77, 0xaa79 },
	{ 0xab5b, 0xab5b },
	{ 0xab6a, 0xab6b },
	{ 0xfb29, 0xfb29 },
	{ 0xfbb2, 0xfbc1 },
	{ 0xfdfc, 0xfdfd },
	{ 0xfe62, 0xfe62 },
	{ 0xfe64, 0xfe66 },
	{ 0xfe69, 0xfe69 },
	{ 0xff04, 0xff04 },
	{ 0xff0b, 0xff0b },
	{ 0xff1c, 0xff1e },
	{ 0xff3e | EVEN_BIT, 0xff40 | EVEN_BIT },
	{ 0xff5c | EVEN_BIT, 0xff5e | EVEN_BIT },
	{ 0xffe0, 0xffe6 },
	{ 0xffe8, 0xffee },
	{ 0xfffc, 0xfffd },
	{ 0x10137, 0x1013f },
	{ 0x10179, 0x10189 },
	{ 0x1018c, 0x1018e },
	{ 0x10190, 0x1019c },
	{ 0x101a0, 0x101a0 },
	{ 0x101d0, 0x101fc },
	{ 0x10877, 0x10878 },
	{ 0x10ac8, 0x10ac8 },
	{ 0x1173f, 0x1173f },
	{ 0x11fd5, 0x11ff1 },
	{ 0x16b3c, 0x16b3f },
	{ 0x16b45, 0x16b45 },
	{ 0x1bc9c, 0x1bc9c },
	{ 0x1d000, 0x1d0f5 },
	{ 0x1d100, 0x1d126 },
	{ 0x1d129, 0x1d164 },
	{ 0x1d16a, 0x1d16c },
	{ 0x1d183, 0x1d184 },
	{ 0x1d18c, 0x1d1a9 },
	{ 0x1d1ae, 0x1d1e8 },
	{ 0x1d200, 0x1d241 },
	{ 0x1d245, 0x1d245 },
	{ 0x1d300, 0x1d356 },
	{ 0x1d6c1, 0x1d6c1 },
	{ 0x1d6db, 0x1d6db },
	{ 0x1d6fb, 0x1d6fb },
	{ 0x1d715, 0x1d715 },
	{ 0x1d735, 0x1d735 },
	{ 0x1d74f, 0x1d74f },
	{ 0x1d76f, 0x1d76f },
	{ 0x1d789, 0x1d789 },
	{ 0x1d7a9, 0x1d7a9 },
	{ 0x1d7c3, 0x1d7c3 },
	{ 0x1d800, 0x1d9ff },
	{ 0x1da37, 0x1da3a },
	{ 0x1da6d, 0x1da74 },
	{ 0x1da76, 0x1da83 },
	{ 0x1da85, 0x1da86 },
	{ 0x1e14f, 0x1e14f },
	{ 0x1e2ff, 0x1e2ff },
	{ 0x1ecac, 0x1ecac },
	{ 0x1ecb0, 0x1ecb0 },
	{ 0x1ed2e, 0x1ed2e },
	{ 0x1eef0, 0x1eef1 },
	{ 0x1f000, 0x1f02b },
	{ 0x1f030, 0x1f093 },
	{ 0x1f0a0, 0x1f0ae },
	{ 0x1f0b1, 0x1f0bf },
	{ 0x1f0c1, 0x1f0cf },
	{ 0x1f0d1, 0x1f0f5 },
	{ 0x1f10d, 0x1f1ad },
	{ 0x1f1e6, 0x1f202 },
	{ 0x1f210, 0x1f23b },
	{ 0x1f240, 0x1f248 },
	{ 0x1f250, 0x1f251 },
	{ 0x1f260, 0x1f265 },
	{ 0x1f300, 0x1f6d7 },
	{ 0x1f6e0, 0x1f6ec },
	{ 0x1f6f0, 0x1f6fc },
	{ 0x1f700, 0x1f773 },
	{ 0x1f780, 0x1f7d8 },
	{ 0x1f7e0, 0x1f7eb },
	{ 0x1f800, 0x1f80b },
	{ 0x1f810, 0x1f847 },
	{ 0x1f850, 0x1f859 },
	{ 0x1f860, 0x1f887 },
	{ 0x1f890, 0x1f8ad },
	{ 0x1f8b0, 0x1f8b1 },
	{ 0x1f900, 0x1f978 },
	{ 0x1f97a, 0x1f9cb },
	{ 0x1f9cd, 0x1fa53 },
	{ 0x1fa60, 0x1fa6d },
	{ 0x1fa70, 0x1fa74 },
	{ 0x1fa78, 0x1fa7a },
	{ 0x1fa80, 0x1fa86 },
	{ 0x1fa90, 0x1faa8 },
	{ 0x1fab0, 0x1fab6 },
	{ 0x1fac0, 0x1fac2 },
	{ 0x1fad0, 0x1fad6 },
	{ 0x1fb00, 0x1fb92 },
	{ 0x1fb94, 0x1fbca }
};

static constexpr const utf_range separators[] = { //  Z
	{ 0x20, 0x20 },
	{ 0xa0, 0xa0 },
	{ 0x1680, 0x1680 },
	{ 0x2000, 0x200a },
	{ 0x2028, 0x2029 },
	{ 0x202f, 0x202f },
	{ 0x205f, 0x205f },
	{ 0x3000, 0x3000 }
};

static constexpr const utf_range * const specific_categories[] = {
    0, // invalid
    control_chars, format_chars, /* not_assigned_chars */ nullptr, private_use_chars, surrogate_chars,
    /* cased_letters */ nullptr, lowercase_letters, letter_modifiers, other_letters, titlecase_letters, uppercase_letters,
    spacing_combining_marks, enclosing_marks, nonspacing_marks,
    decimal_digits, letter_numbers, other_numbers,
    punctuation_connectors, dashes, punctuation_closes, final_quotes, initial_quotes, other_punctuation, punctuation_opens,
    currency_symbols, modifier_symbols, math_symbols, other_symbols,
    line_separators, paragraph_separators, spaces,
};

#define LEN(arr) sizeof(arr) / sizeof(utf_range)

static constexpr const int specific_lengths[] = {
    0, // invalid
    LEN(control_chars), LEN(format_chars), /* LEN(not_assigned_chars) */ 0, LEN(private_use_chars), LEN(surrogate_chars),
    /* LEN(cased_letters) */ 0, LEN(lowercase_letters), LEN(letter_modifiers), LEN(other_letters), LEN(titlecase_letters), LEN(uppercase_letters),
    LEN(spacing_combining_marks), LEN(enclosing_marks), LEN(nonspacing_marks),
    LEN(decimal_digits), LEN(letter_numbers), LEN(other_numbers),
    LEN(punctuation_connectors), LEN(dashes), LEN(punctuation_closes), LEN(final_quotes), LEN(initial_quotes), LEN(other_punctuation), LEN(punctuation_opens),
    LEN(currency_symbols), LEN(modifier_symbols), LEN(math_symbols), LEN(other_symbols),
    LEN(line_separators), LEN(paragraph_separators), LEN(spaces)
};

static int find(const utf_range* array, int length, rune code) {
    int low = 0, high = length - 1; 
  
    while (low <= high) { 
        int mid = (low + high) / 2; 
  
        if (code.get() >= (array[mid].start & COMPARE_MASK) && code.get() <= (array[mid].end & COMPARE_MASK)) {
            if (array[mid].start & EVEN_BIT) return (mid & 1) ? -1 : mid;
            else if (array[mid].start & ODD_BIT) return (mid & 1) ? mid : -1;
            else return mid;
        }
        else if (code.get() < array[mid].start) high = mid - 1; 
        else low = mid + 1; 
    } 
  
    return -1; 
}

static int inited = 0;

#ifdef INCLUDE_UTF8_LOOKUP_TABLE
    static UnicodeCategory LOOKUP_TABLE[2097152];

    static void populate_lookup_table(const utf_range* array, int length, UnicodeCategory category) {
        for (int i = 0; i < length; i ++) {
            utf_range r = array[i];
            for (u32 c = r.start & COMPARE_MASK; c <= (r.end & COMPARE_MASK); c += (r.start & EVEN_BIT || r.start & ODD_BIT) ? 2 : 1) 
                LOOKUP_TABLE[c] = category;
        }
    }

    static void init_lookup_table() {
        for (long unsigned int i = 1; i < sizeof(specific_categories) / sizeof(utf_range*); i ++) {
            populate_lookup_table(specific_categories[i], specific_lengths[i], (UnicodeCategory)i);
        }
    }

    static int lookup(rune code, UnicodeCategory low, UnicodeCategory high) {
        if (!inited) { inited = 1; init_lookup_table(); }
        UnicodeCategory c = LOOKUP_TABLE[code.get()];
        if (c >= low && c <= high) return 1;
        else return 0;
    }

	UnicodeCategory utf8_category(rune r) {
        if (!inited) { inited = 1; init_lookup_table(); }
		return LOOKUP_TABLE[r.get()];
	}
#endif

int utf8_digit_value(rune digit) {
    int range = find(decimal_digits, (sizeof(decimal_digits)) / sizeof(utf_range), digit);
	if (range == -1) { // Not a digit
		ERROR = INVALID_RUNE;
		return -1;
	}
	return digit.get() - decimal_digits[range].start;
}

int utf8_is_other(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CONTROL, UNICODE_SURROGATE);
    #else
        return find(other_chars, sizeof(other_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_control(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CONTROL, UNICODE_CONTROL);
    #else
        return find(control_chars, sizeof(control_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_format(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_FORMAT, UNICODE_FORMAT);
    #else
        return find(format_chars, sizeof(format_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_not_assigned(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_NOT_ASSIGNED, UNICODE_NOT_ASSIGNED);
    #else
        return 0; // find(not_assigned_chars, sizeof(not_assigned_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_private_use(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PRIVATE_USE, UNICODE_PRIVATE_USE);
    #else
        return find(private_use_chars, sizeof(private_use_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_surrogate(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_SURROGATE, UNICODE_SURROGATE);
    #else
        return find(surrogate_chars, sizeof(surrogate_chars) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_letter(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CASED_LETTER, UNICODE_UPPERCASE_LETTER);
    #else
        return find(letters, sizeof(letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_cased_letter(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CASED_LETTER, UNICODE_CASED_LETTER);
    #else
        return 0; // find(cased_letters, sizeof(cased_letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_lowercase(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_LOWERCASE_LETTER, UNICODE_LOWERCASE_LETTER);
    #else
        return find(lowercase_letters, sizeof(lowercase_letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_letter_modifier(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_LETTER_MODIFIER, UNICODE_LETTER_MODIFIER);
    #else
        return find(letter_modifiers, sizeof(letter_modifiers) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_other_letter(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_OTHER_LETTER, UNICODE_OTHER_LETTER);
    #else
        return find(other_letters, sizeof(other_letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_titlecase(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_TITLECASE_LETTER, UNICODE_TITLECASE_LETTER);
    #else
        return find(titlecase_letters, sizeof(titlecase_letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_uppercase(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_UPPERCASE_LETTER, UNICODE_UPPERCASE_LETTER);
    #else
        return find(uppercase_letters, sizeof(uppercase_letters) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_mark(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_SPACING_COMBINING_MARK, UNICODE_NONSPACING_MARK);
    #else
        return find(marks, sizeof(marks) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_spacing_combining_mark(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_SPACING_COMBINING_MARK, UNICODE_SPACING_COMBINING_MARK);
    #else
        return find(spacing_combining_marks, sizeof(spacing_combining_marks) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_enclosing_mark(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_ENCLOSING_MARK, UNICODE_ENCLOSING_MARK);
    #else
        return find(enclosing_marks, sizeof(enclosing_marks) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_nonspacing_mark(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_NONSPACING_MARK, UNICODE_NONSPACING_MARK);
    #else
        return find(nonspacing_marks, sizeof(nonspacing_marks) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_number(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_DECIMAL_NUMBER, UNICODE_OTHER_NUMBER);
    #else
        return find(numbers, sizeof(numbers) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_digit(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_DECIMAL_NUMBER, UNICODE_DECIMAL_NUMBER);
    #else
        return find(decimal_digits, sizeof(decimal_digits) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_letter_number(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_LETTER_NUMBER, UNICODE_LETTER_NUMBER);
    #else
        return find(letter_numbers, sizeof(letter_numbers) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_other_number(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_OTHER_NUMBER, UNICODE_OTHER_NUMBER);
    #else
        return find(other_numbers, sizeof(other_numbers) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_punctuation(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_CONNECTOR, UNICODE_PUNCTUATION_OPEN);
    #else
        return find(punctuation, sizeof(punctuation) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_connector(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_CONNECTOR, UNICODE_PUNCTUATION_CONNECTOR);
    #else
        return find(punctuation_connectors, sizeof(punctuation_connectors) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_dash(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_DASH, UNICODE_PUNCTUATION_DASH);
    #else
        return find(dashes, sizeof(dashes) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_punctuation_close(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_CLOSE, UNICODE_PUNCTUATION_CLOSE);
    #else
        return find(punctuation_closes, sizeof(punctuation_closes) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_final_quote(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_FINAL_QUOTE, UNICODE_PUNCTUATION_FINAL_QUOTE);
    #else
        return find(final_quotes, sizeof(final_quotes) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_initial_quote(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_INITIAL_QUOTE, UNICODE_PUNCTUATION_INITIAL_QUOTE);
    #else
        return find(initial_quotes, sizeof(initial_quotes) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_other_punctuation(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_OTHER, UNICODE_PUNCTUATION_OTHER);
    #else
        return find(other_punctuation, sizeof(other_punctuation) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_punctuation_open(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PUNCTUATION_OPEN, UNICODE_PUNCTUATION_OPEN);
    #else
        return find(punctuation_opens, sizeof(punctuation_opens) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_symbol(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CURRENCY_SYMBOL, UNICODE_OTHER_SYMBOL);
    #else
        return find(symbols, sizeof(symbols) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_currency_symbol(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_CURRENCY_SYMBOL, UNICODE_CURRENCY_SYMBOL);
    #else
        return find(currency_symbols, sizeof(currency_symbols) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_modifier_symbol(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_MODIFIER_SYMBOL, UNICODE_MODIFIER_SYMBOL);
    #else
        return find(modifier_symbols, sizeof(modifier_symbols) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_math_symbol(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_MATH_SYMBOL, UNICODE_MATH_SYMBOL);
    #else
        return find(math_symbols, sizeof(math_symbols) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_other_symbol(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_OTHER_SYMBOL, UNICODE_OTHER_SYMBOL);
    #else
        return find(other_symbols, sizeof(other_symbols) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_separator(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_LINE_SEPARATOR, UNICODE_SPACE_SEPARATOR);
    #else
        return find(separators, sizeof(separators) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_line_separator(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_LINE_SEPARATOR, UNICODE_LINE_SEPARATOR);
    #else
        return find(line_separators, sizeof(line_separators) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_paragraph_separator(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_PARAGRAPH_SEPARATOR, UNICODE_PARAGRAPH_SEPARATOR);
    #else
        return find(paragraph_separators, sizeof(paragraph_separators) / sizeof(utf_range), r) != -1;
    #endif
}

int utf8_is_space_separator(rune r) {
    #ifdef INCLUDE_UTF8_LOOKUP_TABLE
        return lookup(r, UNICODE_SPACE_SEPARATOR, UNICODE_SPACE_SEPARATOR);
    #else
        return find(spaces, sizeof(spaces) / sizeof(utf_range), r) != -1;
    #endif
}

#endif